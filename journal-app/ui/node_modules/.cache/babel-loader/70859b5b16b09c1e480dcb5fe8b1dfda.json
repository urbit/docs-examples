{"ast":null,"code":"import _defineProperty from \"/home/mike/proj/frontend/ui/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/home/mike/proj/frontend/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/mike/proj/frontend/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/home/mike/proj/frontend/ui/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/mike/proj/frontend/ui/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/mike/proj/frontend/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/mike/proj/frontend/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport addClass from 'dom-helpers/addClass';\nimport css from 'dom-helpers/css';\nimport qsa from 'dom-helpers/querySelectorAll';\nimport removeClass from 'dom-helpers/removeClass';\nimport ModalManager from '@restart/ui/ModalManager';\nvar Selector = {\n  FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',\n  STICKY_CONTENT: '.sticky-top',\n  NAVBAR_TOGGLER: '.navbar-toggler'\n};\n\nvar BootstrapModalManager = /*#__PURE__*/function (_ModalManager) {\n  _inherits(BootstrapModalManager, _ModalManager);\n\n  var _super = _createSuper(BootstrapModalManager);\n\n  function BootstrapModalManager() {\n    _classCallCheck(this, BootstrapModalManager);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(BootstrapModalManager, [{\n    key: \"adjustAndStore\",\n    value: function adjustAndStore(prop, element, adjust) {\n      var actual = element.style[prop]; // TODO: DOMStringMap and CSSStyleDeclaration aren't strictly compatible\n      // @ts-ignore\n\n      element.dataset[prop] = actual;\n      css(element, _defineProperty({}, prop, \"\".concat(parseFloat(css(element, prop)) + adjust, \"px\")));\n    }\n  }, {\n    key: \"restore\",\n    value: function restore(prop, element) {\n      var value = element.dataset[prop];\n\n      if (value !== undefined) {\n        delete element.dataset[prop];\n        css(element, _defineProperty({}, prop, value));\n      }\n    }\n  }, {\n    key: \"setContainerStyle\",\n    value: function setContainerStyle(containerState) {\n      var _this = this;\n\n      _get(_getPrototypeOf(BootstrapModalManager.prototype), \"setContainerStyle\", this).call(this, containerState);\n\n      var container = this.getElement();\n      addClass(container, 'modal-open');\n      if (!containerState.scrollBarWidth) return;\n      var paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';\n      var marginProp = this.isRTL ? 'marginLeft' : 'marginRight';\n      qsa(container, Selector.FIXED_CONTENT).forEach(function (el) {\n        return _this.adjustAndStore(paddingProp, el, containerState.scrollBarWidth);\n      });\n      qsa(container, Selector.STICKY_CONTENT).forEach(function (el) {\n        return _this.adjustAndStore(marginProp, el, -containerState.scrollBarWidth);\n      });\n      qsa(container, Selector.NAVBAR_TOGGLER).forEach(function (el) {\n        return _this.adjustAndStore(marginProp, el, containerState.scrollBarWidth);\n      });\n    }\n  }, {\n    key: \"removeContainerStyle\",\n    value: function removeContainerStyle(containerState) {\n      var _this2 = this;\n\n      _get(_getPrototypeOf(BootstrapModalManager.prototype), \"removeContainerStyle\", this).call(this, containerState);\n\n      var container = this.getElement();\n      removeClass(container, 'modal-open');\n      var paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';\n      var marginProp = this.isRTL ? 'marginLeft' : 'marginRight';\n      qsa(container, Selector.FIXED_CONTENT).forEach(function (el) {\n        return _this2.restore(paddingProp, el);\n      });\n      qsa(container, Selector.STICKY_CONTENT).forEach(function (el) {\n        return _this2.restore(marginProp, el);\n      });\n      qsa(container, Selector.NAVBAR_TOGGLER).forEach(function (el) {\n        return _this2.restore(marginProp, el);\n      });\n    }\n  }]);\n\n  return BootstrapModalManager;\n}(ModalManager);\n\nvar sharedManager;\nexport function getSharedManager(options) {\n  if (!sharedManager) sharedManager = new BootstrapModalManager(options);\n  return sharedManager;\n}\nexport default BootstrapModalManager;","map":null,"metadata":{},"sourceType":"module"}