{"ast":null,"code":"import { useEffect } from 'react';\nimport useCommittedRef from './useCommittedRef';\n/**\n * Creates a `setInterval` that is properly cleaned up when a component unmounted\n *\n * ```tsx\n *  function Timer() {\n *    const [timer, setTimer] = useState(0)\n *    useInterval(() => setTimer(i => i + 1), 1000)\n *\n *    return <span>{timer} seconds past</span>\n *  }\n * ```\n *\n * @param fn an function run on each interval\n * @param ms The milliseconds duration of the interval\n */\n\nfunction useInterval(fn, ms, paused, runImmediately) {\n  if (paused === void 0) {\n    paused = false;\n  }\n\n  if (runImmediately === void 0) {\n    runImmediately = false;\n  }\n\n  var handle;\n  var fnRef = useCommittedRef(fn); // this ref is necessary b/c useEffect will sometimes miss a paused toggle\n  // orphaning a setTimeout chain in the aether, so relying on it's refresh logic is not reliable.\n\n  var pausedRef = useCommittedRef(paused);\n\n  var tick = function tick() {\n    if (pausedRef.current) return;\n    fnRef.current();\n    schedule(); // eslint-disable-line no-use-before-define\n  };\n\n  var schedule = function schedule() {\n    clearTimeout(handle);\n    handle = setTimeout(tick, ms);\n  };\n\n  useEffect(function () {\n    if (runImmediately) {\n      tick();\n    } else {\n      schedule();\n    }\n\n    return function () {\n      return clearTimeout(handle);\n    };\n  }, [paused, runImmediately]);\n}\n\nexport default useInterval;","map":null,"metadata":{},"sourceType":"module"}