{"ast":null,"code":"import { useMemo, useRef } from 'react';\nimport useEventListener from '@restart/hooks/useEventListener';\nconst defaultSelector = ['input', 'textarea', 'select', 'button:not([tabindex=\"-1\"])', '[tabindex=\"0\"]'].join(',');\n\nconst getDocument = () => document;\n\nexport default function useTabTrap(ref) {\n  let selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultSelector;\n  const startedRef = useRef(false);\n  useEventListener(getDocument, 'keydown', event => {\n    if (!startedRef.current || !ref.current || event.key !== 'Tab') {\n      return;\n    }\n\n    const tabbables = ref.current.querySelectorAll(selector);\n\n    if (event.shiftKey && event.target === tabbables[0]) {\n      tabbables[tabbables.length - 1].focus();\n      event.preventDefault();\n    } else if (!event.shiftKey && event.target === tabbables[tabbables.length - 1] || !ref.current.contains(event.target)) {\n      tabbables[0].focus();\n      event.preventDefault();\n    }\n  });\n  return useMemo(() => ({\n    focus() {\n      const tabbables = ref.current.querySelectorAll(selector);\n      const first = tabbables[0];\n      if (first) first.focus();\n    },\n\n    start() {\n      startedRef.current = true;\n    },\n\n    stop() {\n      startedRef.current = false;\n    }\n\n  }), [ref, selector]);\n}","map":{"version":3,"sources":["/home/mike/proj/frontend/ui/node_modules/react-widgets/esm/useTabTrap.js"],"names":["useMemo","useRef","useEventListener","defaultSelector","join","getDocument","document","useTabTrap","ref","selector","startedRef","event","current","key","tabbables","querySelectorAll","shiftKey","target","length","focus","preventDefault","contains","first","start","stop"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,MAAlB,QAAgC,OAAhC;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,MAAMC,eAAe,GAAG,CAAC,OAAD,EAAU,UAAV,EAAsB,QAAtB,EAAgC,6BAAhC,EAA+D,gBAA/D,EAAiFC,IAAjF,CAAsF,GAAtF,CAAxB;;AAEA,MAAMC,WAAW,GAAG,MAAMC,QAA1B;;AAEA,eAAe,SAASC,UAAT,CAAoBC,GAApB,EAAqD;AAAA,MAA5BC,QAA4B,uEAAjBN,eAAiB;AAClE,QAAMO,UAAU,GAAGT,MAAM,CAAC,KAAD,CAAzB;AACAC,EAAAA,gBAAgB,CAACG,WAAD,EAAc,SAAd,EAAyBM,KAAK,IAAI;AAChD,QAAI,CAACD,UAAU,CAACE,OAAZ,IAAuB,CAACJ,GAAG,CAACI,OAA5B,IAAuCD,KAAK,CAACE,GAAN,KAAc,KAAzD,EAAgE;AAC9D;AACD;;AAED,UAAMC,SAAS,GAAGN,GAAG,CAACI,OAAJ,CAAYG,gBAAZ,CAA6BN,QAA7B,CAAlB;;AAEA,QAAIE,KAAK,CAACK,QAAN,IAAkBL,KAAK,CAACM,MAAN,KAAiBH,SAAS,CAAC,CAAD,CAAhD,EAAqD;AACnDA,MAAAA,SAAS,CAACA,SAAS,CAACI,MAAV,GAAmB,CAApB,CAAT,CAAgCC,KAAhC;AACAR,MAAAA,KAAK,CAACS,cAAN;AACD,KAHD,MAGO,IAAI,CAACT,KAAK,CAACK,QAAP,IAAmBL,KAAK,CAACM,MAAN,KAAiBH,SAAS,CAACA,SAAS,CAACI,MAAV,GAAmB,CAApB,CAA7C,IAAuE,CAACV,GAAG,CAACI,OAAJ,CAAYS,QAAZ,CAAqBV,KAAK,CAACM,MAA3B,CAA5E,EAAgH;AACrHH,MAAAA,SAAS,CAAC,CAAD,CAAT,CAAaK,KAAb;AACAR,MAAAA,KAAK,CAACS,cAAN;AACD;AACF,GAde,CAAhB;AAeA,SAAOpB,OAAO,CAAC,OAAO;AACpBmB,IAAAA,KAAK,GAAG;AACN,YAAML,SAAS,GAAGN,GAAG,CAACI,OAAJ,CAAYG,gBAAZ,CAA6BN,QAA7B,CAAlB;AACA,YAAMa,KAAK,GAAGR,SAAS,CAAC,CAAD,CAAvB;AACA,UAAIQ,KAAJ,EAAWA,KAAK,CAACH,KAAN;AACZ,KALmB;;AAOpBI,IAAAA,KAAK,GAAG;AACNb,MAAAA,UAAU,CAACE,OAAX,GAAqB,IAArB;AACD,KATmB;;AAWpBY,IAAAA,IAAI,GAAG;AACLd,MAAAA,UAAU,CAACE,OAAX,GAAqB,KAArB;AACD;;AAbmB,GAAP,CAAD,EAeV,CAACJ,GAAD,EAAMC,QAAN,CAfU,CAAd;AAgBD","sourcesContent":["import { useMemo, useRef } from 'react';\nimport useEventListener from '@restart/hooks/useEventListener';\nconst defaultSelector = ['input', 'textarea', 'select', 'button:not([tabindex=\"-1\"])', '[tabindex=\"0\"]'].join(',');\n\nconst getDocument = () => document;\n\nexport default function useTabTrap(ref, selector = defaultSelector) {\n  const startedRef = useRef(false);\n  useEventListener(getDocument, 'keydown', event => {\n    if (!startedRef.current || !ref.current || event.key !== 'Tab') {\n      return;\n    }\n\n    const tabbables = ref.current.querySelectorAll(selector);\n\n    if (event.shiftKey && event.target === tabbables[0]) {\n      tabbables[tabbables.length - 1].focus();\n      event.preventDefault();\n    } else if (!event.shiftKey && event.target === tabbables[tabbables.length - 1] || !ref.current.contains(event.target)) {\n      tabbables[0].focus();\n      event.preventDefault();\n    }\n  });\n  return useMemo(() => ({\n    focus() {\n      const tabbables = ref.current.querySelectorAll(selector);\n      const first = tabbables[0];\n      if (first) first.focus();\n    },\n\n    start() {\n      startedRef.current = true;\n    },\n\n    stop() {\n      startedRef.current = false;\n    }\n\n  }), [ref, selector]);\n}"]},"metadata":{},"sourceType":"module"}