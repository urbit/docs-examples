{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clone = clone;\nexports.isDate = isDate;\nexports.addMonths = addMonths;\nexports.isSameDay = isSameDay;\nexports.isSameMonth = isSameMonth;\nexports.isDayBefore = isDayBefore;\nexports.isDayAfter = isDayAfter;\nexports.isPastDay = isPastDay;\nexports.isFutureDay = isFutureDay;\nexports.isDayBetween = isDayBetween;\nexports.addDayToRange = addDayToRange;\nexports.isDayInRange = isDayInRange;\nexports.getWeekNumber = getWeekNumber;\n/**\n * Clone a date object.\n *\n * @export\n * @param  {Date} d The date to clone\n * @return {Date} The cloned date\n */\n\nfunction clone(d) {\n  return new Date(d.getTime());\n}\n/**\n * Return `true` if the passed value is a valid JavaScript Date object.\n *\n * @export\n * @param {any} value\n * @returns {Boolean}\n */\n\n\nfunction isDate(value) {\n  return value instanceof Date && !isNaN(value.valueOf());\n}\n/**\n * Return `d` as a new date with `n` months added.\n *\n * @export\n * @param {Date} d\n * @param {number} n\n */\n\n\nfunction addMonths(d, n) {\n  var newDate = clone(d);\n  newDate.setMonth(d.getMonth() + n);\n  return newDate;\n}\n/**\n * Return `true` if two dates are the same day, ignoring the time.\n *\n * @export\n * @param  {Date}  d1\n * @param  {Date}  d2\n * @return {Boolean}\n */\n\n\nfunction isSameDay(d1, d2) {\n  if (!d1 || !d2) {\n    return false;\n  }\n\n  return d1.getDate() === d2.getDate() && d1.getMonth() === d2.getMonth() && d1.getFullYear() === d2.getFullYear();\n}\n/**\n * Return `true` if two dates fall in the same month.\n *\n * @export\n * @param  {Date}  d1\n * @param  {Date}  d2\n * @return {Boolean}\n */\n\n\nfunction isSameMonth(d1, d2) {\n  if (!d1 || !d2) {\n    return false;\n  }\n\n  return d1.getMonth() === d2.getMonth() && d1.getFullYear() === d2.getFullYear();\n}\n/**\n * Returns `true` if the first day is before the second day.\n *\n * @export\n * @param {Date} d1\n * @param {Date} d2\n * @returns {Boolean}\n */\n\n\nfunction isDayBefore(d1, d2) {\n  var day1 = clone(d1).setHours(0, 0, 0, 0);\n  var day2 = clone(d2).setHours(0, 0, 0, 0);\n  return day1 < day2;\n}\n/**\n * Returns `true` if the first day is after the second day.\n *\n * @export\n * @param {Date} d1\n * @param {Date} d2\n * @returns {Boolean}\n */\n\n\nfunction isDayAfter(d1, d2) {\n  var day1 = clone(d1).setHours(0, 0, 0, 0);\n  var day2 = clone(d2).setHours(0, 0, 0, 0);\n  return day1 > day2;\n}\n/**\n * Return `true` if a day is in the past, e.g. yesterday or any day\n * before yesterday.\n *\n * @export\n * @param  {Date}  d\n * @return {Boolean}\n */\n\n\nfunction isPastDay(d) {\n  var today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return isDayBefore(d, today);\n}\n/**\n * Return `true` if a day is in the future, e.g. tomorrow or any day\n * after tomorrow.\n *\n * @export\n * @param  {Date}  d\n * @return {Boolean}\n */\n\n\nfunction isFutureDay(d) {\n  var tomorrow = new Date(new Date().getTime() + 24 * 60 * 60 * 1000);\n  tomorrow.setHours(0, 0, 0, 0);\n  return d >= tomorrow;\n}\n/**\n * Return `true` if day `d` is between days `d1` and `d2`,\n * without including them.\n *\n * @export\n * @param  {Date}  d\n * @param  {Date}  d1\n * @param  {Date}  d2\n * @return {Boolean}\n */\n\n\nfunction isDayBetween(d, d1, d2) {\n  var date = clone(d);\n  date.setHours(0, 0, 0, 0);\n  return isDayAfter(date, d1) && isDayBefore(date, d2) || isDayAfter(date, d2) && isDayBefore(date, d1);\n}\n/**\n * Add a day to a range and return a new range. A range is an object with\n * `from` and `to` days.\n *\n * @export\n * @param {Date} day\n * @param {Object} range\n * @return {Object} Returns a new range object\n */\n\n\nfunction addDayToRange(day) {\n  var range = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    from: null,\n    to: null\n  };\n  var from = range.from,\n      to = range.to;\n\n  if (!from) {\n    from = day;\n  } else if (from && to && isSameDay(from, to) && isSameDay(day, from)) {\n    from = null;\n    to = null;\n  } else if (to && isDayBefore(day, from)) {\n    from = day;\n  } else if (to && isSameDay(day, to)) {\n    from = day;\n    to = day;\n  } else {\n    to = day;\n\n    if (isDayBefore(to, from)) {\n      to = from;\n      from = day;\n    }\n  }\n\n  return {\n    from: from,\n    to: to\n  };\n}\n/**\n * Return `true` if a day is included in a range of days.\n *\n * @export\n * @param  {Date}  day\n * @param  {Object}  range\n * @return {Boolean}\n */\n\n\nfunction isDayInRange(day, range) {\n  var from = range.from,\n      to = range.to;\n  return from && isSameDay(day, from) || to && isSameDay(day, to) || from && to && isDayBetween(day, from, to);\n}\n/**\n * Return the year's week number (as per ISO, i.e. with the week starting from monday)\n * for the given day.\n *\n * @export\n * @param {Date} day\n * @returns {Number}\n */\n\n\nfunction getWeekNumber(day) {\n  var date = clone(day);\n  date.setHours(0, 0, 0);\n  date.setDate(date.getDate() + 4 - (date.getDay() || 7));\n  return Math.ceil(((date - new Date(date.getFullYear(), 0, 1)) / 8.64e7 + 1) / 7);\n}\n\nexports.default = {\n  addDayToRange: addDayToRange,\n  addMonths: addMonths,\n  clone: clone,\n  getWeekNumber: getWeekNumber,\n  isDate: isDate,\n  isDayAfter: isDayAfter,\n  isDayBefore: isDayBefore,\n  isDayBetween: isDayBetween,\n  isDayInRange: isDayInRange,\n  isFutureDay: isFutureDay,\n  isPastDay: isPastDay,\n  isSameDay: isSameDay,\n  isSameMonth: isSameMonth\n};","map":{"version":3,"mappings":"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","names":["clone","isDate","addMonths","isSameDay","isSameMonth","isDayBefore","isDayAfter","isPastDay","isFutureDay","isDayBetween","addDayToRange","isDayInRange","getWeekNumber","d","Date","getTime","value","isNaN","valueOf","n","newDate","setMonth","getMonth","d1","d2","getDate","getFullYear","day1","setHours","day2","today","tomorrow","date","day","range","from","to","setDate","getDay","Math","ceil"],"sources":["/home/mike/proj/frontend/ui/node_modules/react-day-picker/src/DateUtils.js"],"sourcesContent":["/**\n * Clone a date object.\n *\n * @export\n * @param  {Date} d The date to clone\n * @return {Date} The cloned date\n */\nexport function clone(d) {\n  return new Date(d.getTime());\n}\n\n/**\n * Return `true` if the passed value is a valid JavaScript Date object.\n *\n * @export\n * @param {any} value\n * @returns {Boolean}\n */\nexport function isDate(value) {\n  return value instanceof Date && !isNaN(value.valueOf());\n}\n\n/**\n * Return `d` as a new date with `n` months added.\n *\n * @export\n * @param {Date} d\n * @param {number} n\n */\nexport function addMonths(d, n) {\n  const newDate = clone(d);\n  newDate.setMonth(d.getMonth() + n);\n  return newDate;\n}\n\n/**\n * Return `true` if two dates are the same day, ignoring the time.\n *\n * @export\n * @param  {Date}  d1\n * @param  {Date}  d2\n * @return {Boolean}\n */\nexport function isSameDay(d1, d2) {\n  if (!d1 || !d2) {\n    return false;\n  }\n  return (\n    d1.getDate() === d2.getDate() &&\n    d1.getMonth() === d2.getMonth() &&\n    d1.getFullYear() === d2.getFullYear()\n  );\n}\n\n/**\n * Return `true` if two dates fall in the same month.\n *\n * @export\n * @param  {Date}  d1\n * @param  {Date}  d2\n * @return {Boolean}\n */\nexport function isSameMonth(d1, d2) {\n  if (!d1 || !d2) {\n    return false;\n  }\n  return (\n    d1.getMonth() === d2.getMonth() && d1.getFullYear() === d2.getFullYear()\n  );\n}\n\n/**\n * Returns `true` if the first day is before the second day.\n *\n * @export\n * @param {Date} d1\n * @param {Date} d2\n * @returns {Boolean}\n */\nexport function isDayBefore(d1, d2) {\n  const day1 = clone(d1).setHours(0, 0, 0, 0);\n  const day2 = clone(d2).setHours(0, 0, 0, 0);\n  return day1 < day2;\n}\n\n/**\n * Returns `true` if the first day is after the second day.\n *\n * @export\n * @param {Date} d1\n * @param {Date} d2\n * @returns {Boolean}\n */\nexport function isDayAfter(d1, d2) {\n  const day1 = clone(d1).setHours(0, 0, 0, 0);\n  const day2 = clone(d2).setHours(0, 0, 0, 0);\n  return day1 > day2;\n}\n\n/**\n * Return `true` if a day is in the past, e.g. yesterday or any day\n * before yesterday.\n *\n * @export\n * @param  {Date}  d\n * @return {Boolean}\n */\nexport function isPastDay(d) {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return isDayBefore(d, today);\n}\n\n/**\n * Return `true` if a day is in the future, e.g. tomorrow or any day\n * after tomorrow.\n *\n * @export\n * @param  {Date}  d\n * @return {Boolean}\n */\nexport function isFutureDay(d) {\n  const tomorrow = new Date(new Date().getTime() + 24 * 60 * 60 * 1000);\n  tomorrow.setHours(0, 0, 0, 0);\n  return d >= tomorrow;\n}\n\n/**\n * Return `true` if day `d` is between days `d1` and `d2`,\n * without including them.\n *\n * @export\n * @param  {Date}  d\n * @param  {Date}  d1\n * @param  {Date}  d2\n * @return {Boolean}\n */\nexport function isDayBetween(d, d1, d2) {\n  const date = clone(d);\n  date.setHours(0, 0, 0, 0);\n  return (\n    (isDayAfter(date, d1) && isDayBefore(date, d2)) ||\n    (isDayAfter(date, d2) && isDayBefore(date, d1))\n  );\n}\n\n/**\n * Add a day to a range and return a new range. A range is an object with\n * `from` and `to` days.\n *\n * @export\n * @param {Date} day\n * @param {Object} range\n * @return {Object} Returns a new range object\n */\nexport function addDayToRange(day, range = { from: null, to: null }) {\n  let { from, to } = range;\n  if (!from) {\n    from = day;\n  } else if (from && to && isSameDay(from, to) && isSameDay(day, from)) {\n    from = null;\n    to = null;\n  } else if (to && isDayBefore(day, from)) {\n    from = day;\n  } else if (to && isSameDay(day, to)) {\n    from = day;\n    to = day;\n  } else {\n    to = day;\n    if (isDayBefore(to, from)) {\n      to = from;\n      from = day;\n    }\n  }\n\n  return { from, to };\n}\n\n/**\n * Return `true` if a day is included in a range of days.\n *\n * @export\n * @param  {Date}  day\n * @param  {Object}  range\n * @return {Boolean}\n */\nexport function isDayInRange(day, range) {\n  const { from, to } = range;\n  return (\n    (from && isSameDay(day, from)) ||\n    (to && isSameDay(day, to)) ||\n    (from && to && isDayBetween(day, from, to))\n  );\n}\n\n/**\n * Return the year's week number (as per ISO, i.e. with the week starting from monday)\n * for the given day.\n *\n * @export\n * @param {Date} day\n * @returns {Number}\n */\nexport function getWeekNumber(day) {\n  const date = clone(day);\n  date.setHours(0, 0, 0);\n  date.setDate(date.getDate() + 4 - (date.getDay() || 7));\n  return Math.ceil(\n    ((date - new Date(date.getFullYear(), 0, 1)) / 8.64e7 + 1) / 7\n  );\n}\n\nexport default {\n  addDayToRange,\n  addMonths,\n  clone,\n  getWeekNumber,\n  isDate,\n  isDayAfter,\n  isDayBefore,\n  isDayBetween,\n  isDayInRange,\n  isFutureDay,\n  isPastDay,\n  isSameDay,\n  isSameMonth,\n};\n"]},"metadata":{},"sourceType":"script"}