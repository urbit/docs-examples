{"ast":null,"code":"function fromString(parser, defaultLocale) {\n  return function fromStringFunction(string) {\n    let locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultLocale;\n    const parsed = parser.attempt(string, locale);\n\n    if (parsed.invalid) {\n      return parsed;\n    } // set to Jan 1 to prevent setting non-existent days\n\n\n    const date = new Date(2000, 0, 1); // first setting day, then year, then month\n    // to handle months with fewer days and years without Feb 29\n\n    if (typeof parsed.day === 'number') {\n      date.setUTCDate(parsed.day);\n    }\n\n    if (typeof parsed.year === 'number') {\n      date.setUTCFullYear(parsed.year);\n    }\n\n    if (typeof parsed.month === 'number') {\n      date.setUTCMonth(parsed.month - 1);\n    } // default to first unit for time components\n\n\n    date.setUTCHours(parsed.hour || 0);\n    date.setUTCMinutes(parsed.minute || 0);\n    date.setUTCSeconds(parsed.second || 0);\n    date.setUTCMilliseconds(parsed.millisecond || 0);\n\n    if (typeof parsed.offset === 'number') {\n      return new Date(date - parsed.offset * 60 * 1000);\n    }\n\n    return date;\n  };\n}\n\nmodule.exports = fromString;","map":{"version":3,"sources":["/home/mike/proj/frontend/ui/node_modules/any-date-parser/src/fromString/fromString.js"],"names":["fromString","parser","defaultLocale","fromStringFunction","string","locale","parsed","attempt","invalid","date","Date","day","setUTCDate","year","setUTCFullYear","month","setUTCMonth","setUTCHours","hour","setUTCMinutes","minute","setUTCSeconds","second","setUTCMilliseconds","millisecond","offset","module","exports"],"mappings":"AAAA,SAASA,UAAT,CAAoBC,MAApB,EAA4BC,aAA5B,EAA2C;AAC1C,SAAO,SAASC,kBAAT,CAA4BC,MAA5B,EAA4D;AAAA,QAAxBC,MAAwB,uEAAfH,aAAe;AAClE,UAAMI,MAAM,GAAGL,MAAM,CAACM,OAAP,CAAeH,MAAf,EAAuBC,MAAvB,CAAf;;AACA,QAAIC,MAAM,CAACE,OAAX,EAAoB;AACnB,aAAOF,MAAP;AACA,KAJiE,CAKlE;;;AACA,UAAMG,IAAI,GAAG,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,CAAb,CANkE,CAOlE;AACA;;AACA,QAAI,OAAOJ,MAAM,CAACK,GAAd,KAAsB,QAA1B,EAAoC;AACnCF,MAAAA,IAAI,CAACG,UAAL,CAAgBN,MAAM,CAACK,GAAvB;AACA;;AACD,QAAI,OAAOL,MAAM,CAACO,IAAd,KAAuB,QAA3B,EAAqC;AACpCJ,MAAAA,IAAI,CAACK,cAAL,CAAoBR,MAAM,CAACO,IAA3B;AACA;;AACD,QAAI,OAAOP,MAAM,CAACS,KAAd,KAAwB,QAA5B,EAAsC;AACrCN,MAAAA,IAAI,CAACO,WAAL,CAAiBV,MAAM,CAACS,KAAP,GAAe,CAAhC;AACA,KAjBiE,CAkBlE;;;AACAN,IAAAA,IAAI,CAACQ,WAAL,CAAiBX,MAAM,CAACY,IAAP,IAAe,CAAhC;AACAT,IAAAA,IAAI,CAACU,aAAL,CAAmBb,MAAM,CAACc,MAAP,IAAiB,CAApC;AACAX,IAAAA,IAAI,CAACY,aAAL,CAAmBf,MAAM,CAACgB,MAAP,IAAiB,CAApC;AACAb,IAAAA,IAAI,CAACc,kBAAL,CAAwBjB,MAAM,CAACkB,WAAP,IAAsB,CAA9C;;AACA,QAAI,OAAOlB,MAAM,CAACmB,MAAd,KAAyB,QAA7B,EAAuC;AACtC,aAAO,IAAIf,IAAJ,CAASD,IAAI,GAAGH,MAAM,CAACmB,MAAP,GAAgB,EAAhB,GAAqB,IAArC,CAAP;AACA;;AACD,WAAOhB,IAAP;AACA,GA3BD;AA4BA;;AAEDiB,MAAM,CAACC,OAAP,GAAiB3B,UAAjB","sourcesContent":["function fromString(parser, defaultLocale) {\n\treturn function fromStringFunction(string, locale = defaultLocale) {\n\t\tconst parsed = parser.attempt(string, locale);\n\t\tif (parsed.invalid) {\n\t\t\treturn parsed;\n\t\t}\n\t\t// set to Jan 1 to prevent setting non-existent days\n\t\tconst date = new Date(2000, 0, 1);\n\t\t// first setting day, then year, then month\n\t\t// to handle months with fewer days and years without Feb 29\n\t\tif (typeof parsed.day === 'number') {\n\t\t\tdate.setUTCDate(parsed.day);\n\t\t}\n\t\tif (typeof parsed.year === 'number') {\n\t\t\tdate.setUTCFullYear(parsed.year);\n\t\t}\n\t\tif (typeof parsed.month === 'number') {\n\t\t\tdate.setUTCMonth(parsed.month - 1);\n\t\t}\n\t\t// default to first unit for time components\n\t\tdate.setUTCHours(parsed.hour || 0);\n\t\tdate.setUTCMinutes(parsed.minute || 0);\n\t\tdate.setUTCSeconds(parsed.second || 0);\n\t\tdate.setUTCMilliseconds(parsed.millisecond || 0);\n\t\tif (typeof parsed.offset === 'number') {\n\t\t\treturn new Date(date - parsed.offset * 60 * 1000);\n\t\t}\n\t\treturn date;\n\t};\n}\n\nmodule.exports = fromString;\n"]},"metadata":{},"sourceType":"script"}