{"ast":null,"code":"const _excluded = [\"value\", \"use12HourClock\", \"padValues\", \"emptyCharacter\", \"precision\", \"noClearButton\", \"hoursAddon\", \"minutesAddon\", \"secondsAddon\", \"millisecondsAddon\", \"className\", \"disabled\", \"readOnly\", \"datePart\", \"onChange\", \"onBlur\", \"onFocus\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport classNames from 'classnames';\nimport qsa from 'dom-helpers/querySelectorAll';\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useRef, useState } from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport Button from './Button';\nimport DateTimePartInput from './DateTimePartInput';\nimport { times } from './Icon';\nimport Widget from './Widget';\nimport dates from './dates';\nimport useFocusManager from './useFocusManager';\n\nconst selectTextRange = el => {\n  if (el instanceof HTMLInputElement) return el.select();\n  const range = document.createRange();\n  range.selectNodeContents(el);\n  const selection = window.getSelection();\n\n  if (selection) {\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}; // prettier-ignore\n\n\nconst isEmptyValue = (p, precision) => p.hours == null && p.minutes == null && (precision != 'seconds' && precision !== 'milliseconds' || p.seconds == null) && (precision !== 'milliseconds' || p.milliseconds == null); // prettier-ignore\n\n\nconst isPartialValue = (p, precision) => p.hours == null || p.minutes == null || (precision === 'seconds' || precision === 'milliseconds') && p.seconds == null || precision === 'milliseconds' && p.milliseconds == null;\n\nconst getValueParts = (value, use12HourClock) => {\n  let hours, minutes, seconds, milliseconds;\n  let meridiem = 'AM';\n\n  if (value) {\n    hours = value.getHours();\n\n    if (use12HourClock) {\n      meridiem = hours < 12 ? 'AM' : 'PM';\n      hours = hours % 12 || 12;\n    }\n\n    minutes = value.getMinutes();\n    seconds = value.getSeconds();\n    milliseconds = value.getMilliseconds();\n  }\n\n  return {\n    hours,\n    minutes,\n    seconds,\n    milliseconds,\n    meridiem\n  };\n};\n\nconst TEST_VALID = {\n  hours: /^([1]?[0-9]|2[0-3])$/,\n  hours12: /^(1[0-2]|0?[1-9])$/,\n  minutes: /^([0-5]?\\d)$/,\n  seconds: /^([0-5]?\\d)$/,\n  milliseconds: /^(\\d{1,3})$/\n};\nconst TEST_COMPLETE = {\n  hours: /^([3-9]|\\d{2})$/,\n  hours12: /^(\\d{2}|[2-9])$/,\n  minutes: /^(d{2}|[6-9])$/,\n  seconds: /^(d{2}|[6-9])$/,\n  milliseconds: /^(\\d{3})$/\n};\n\nfunction testPart(value, part, use12HourClock, tests) {\n  const key = part === 'hours' && use12HourClock ? 'hours12' : part;\n  return tests[key].test(value);\n}\n\nconst isValid = (value, part, use12HourClock) => testPart(value, part, use12HourClock, TEST_VALID);\n\nconst isComplete = (value, part, use12HourClock) => testPart(value, part, use12HourClock, TEST_COMPLETE);\n\nconst propTypes = {\n  /**\n   * @example ['valuePicker', [ ['new Date()'] ]]\n   */\n  value: PropTypes.instanceOf(Date),\n\n  /**\n   * @example ['onChangePicker', [ ['new Date()'] ]]\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The default date used to construct a new time when the `value` is empty\n   *\n   * @default new Date()\n   **/\n  datePart: PropTypes.instanceOf(Date),\n\n  /**\n   * Use a 12 hour clock (with AM/PM) instead of 24 hour one.\n   * The configured localizer may provide a default value .\n   **/\n  use12HourClock: PropTypes.bool,\n\n  /** Time part values will be padded by `0` */\n  padValues: PropTypes.bool,\n\n  /** The string character used to pad empty, or cleared values */\n  emptyCharacter: PropTypes.string,\n\n  /** Hide the input clear button */\n  noClearButton: PropTypes.bool,\n\n  /**\n   * @example ['disabled', ['new Date()']]\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @example ['readOnly', ['new Date()']]\n   */\n  readOnly: PropTypes.bool,\n\n  /** Controls how precise of a time can be input **/\n  precision: PropTypes.oneOf(['minutes', 'seconds', 'milliseconds']).isRequired,\n\n  /**\n   * The seperator between hours and minutes\n   * @default ':'\n   */\n  hoursAddon: PropTypes.node,\n\n  /**\n   * The seperator between hours and minutes\n   * @default ':'\n   */\n  minutesAddon: PropTypes.node,\n\n  /**\n   * The seperator between hours and minutes\n   * @default ':'\n   */\n  secondsAddon: PropTypes.node,\n\n  /**\n   * The seperator between hours and minutes\n   * @default '.'\n   */\n  millisecondsAddon: PropTypes.node\n};\nconst defaultProps = {\n  hoursAddon: ':',\n  padValues: true,\n  precision: 'minutes',\n  emptyCharacter: '-'\n}; // let count = 0\n\nfunction useTimePartState(value, use12HourClock) {\n  const [state, setState] = useState(() => ({\n    value,\n    use12HourClock,\n    timeParts: getValueParts(value, use12HourClock)\n  }));\n  const setTimeParts = useCallback(timeParts => setState(s => Object.assign({}, s, {\n    timeParts\n  })), [setState]);\n\n  if (state.value !== value || state.use12HourClock !== use12HourClock) {\n    // count++\n    // if (count < 100)\n    setState({\n      value,\n      use12HourClock,\n      timeParts: getValueParts(value, use12HourClock)\n    });\n  }\n\n  return [state.timeParts, setTimeParts];\n}\n\nfunction TimeInput(uncontrolledProps) {\n  const _useUncontrolled = useUncontrolled(uncontrolledProps, {\n    value: 'onChange'\n  }),\n        {\n    value,\n    use12HourClock,\n    padValues: pad,\n    emptyCharacter,\n    precision,\n    noClearButton,\n    hoursAddon,\n    minutesAddon,\n    secondsAddon,\n    millisecondsAddon,\n    className,\n    disabled,\n    readOnly,\n    datePart,\n    onChange,\n    onBlur,\n    onFocus\n  } = _useUncontrolled,\n        props = _objectWithoutPropertiesLoose(_useUncontrolled, _excluded);\n\n  let minsAddon = minutesAddon !== undefined ? minutesAddon : precision === 'seconds' || precision === 'milliseconds' ? ':' : '';\n  let secsAddon = secondsAddon !== undefined ? secondsAddon : precision === 'milliseconds' ? ':' : '';\n  const ref = useRef(null);\n  const hourRef = useRef(null);\n  const [focusEvents, focused] = useFocusManager(ref, {\n    disabled,\n    onBlur,\n    onFocus\n  }, {\n    didHandle: (focused, e) => {\n      var _hourRef$current;\n\n      if (!focused) return;\n      if (!e.target.dataset.focusable) (_hourRef$current = hourRef.current) == null ? void 0 : _hourRef$current.focus();else select(e.target);\n    }\n  });\n  const [timeParts, setTimeParts] = useTimePartState(value != null ? value : null, use12HourClock != null ? use12HourClock : false);\n\n  function getDatePart() {\n    return dates.startOf(datePart || new Date(), 'day');\n  }\n\n  const getMin = part => part === 'hours' ? 1 : 0;\n\n  const getMax = part => {\n    if (part === 'hours') return use12HourClock ? 12 : 23;\n    if (part === 'milliseconds') return 999;\n    return 59;\n  };\n\n  function select() {\n    let target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.activeElement;\n    window.Promise.resolve().then(() => {\n      if (focused) selectTextRange(target);\n    });\n  }\n  /**\n   * Handlers\n   */\n\n\n  const handleClear = () => {\n    var _hourRef$current2;\n\n    (_hourRef$current2 = hourRef.current) == null ? void 0 : _hourRef$current2.focus();\n    if (value) onChange(null);else setTimeParts(getValueParts(null));\n  };\n\n  const handleChange = (part, event) => {\n    const currentValue = timeParts[part];\n    const {\n      target\n    } = event;\n    const rawValue = target.value;\n    let strValue = `${currentValue || ''}${rawValue}`;\n    let numValue = +strValue;\n\n    if (isNaN(numValue) || strValue && !isValid(strValue, part, use12HourClock != null ? use12HourClock : false)) {\n      // the combined value is now past the max or invalid so try the single\n      // digit and \"start over\" filling the value\n      if (isValid(rawValue, part, use12HourClock != null ? use12HourClock : false) && !isNaN(+rawValue)) {\n        // change the effective current value\n        strValue = rawValue;\n        numValue = +rawValue;\n      } else {\n        return event.preventDefault();\n      }\n    }\n\n    const nextValue = target.value ? numValue : null;\n    notifyChange({\n      [part]: nextValue\n    });\n\n    if (nextValue != null && isComplete(strValue, part, use12HourClock != null ? use12HourClock : false)) {\n      focusNext(event.currentTarget, +1);\n    } else {\n      select(target);\n    }\n  };\n\n  const handleSelect = _ref => {\n    let {\n      target\n    } = _ref;\n    select(target);\n  };\n\n  const handleKeyDown = (part, event) => {\n    const {\n      key\n    } = event;\n    const input = event.currentTarget;\n    const {\n      selectionStart: start,\n      selectionEnd: end\n    } = input;\n    const isRTL = getComputedStyle(input).getPropertyValue('direction') === 'rtl';\n    const isMeridiem = part === 'meridiem';\n    const isNext = key === (isRTL ? 'ArrowLeft' : 'ArrowRight');\n    const isPrev = key === (isRTL ? 'ArrowRight' : 'ArrowLeft');\n\n    if (key === 'ArrowUp') {\n      event.preventDefault();\n      increment(part, 1);\n    }\n\n    if (key === 'ArrowDown') {\n      event.preventDefault();\n      increment(part, -1);\n    }\n\n    if (isPrev && (isMeridiem || start - 1 < 0)) {\n      event.preventDefault();\n      focusNext(input, -1);\n    }\n\n    if (isNext && (isMeridiem || input.value.length <= end + 1)) {\n      event.preventDefault();\n      focusNext(input, +1);\n    }\n\n    if (readOnly && key !== 'Tab') {\n      event.preventDefault();\n    }\n\n    if (isMeridiem) {\n      if (key === 'a' || key === 'A') notifyChange({\n        meridiem: 'AM'\n      });\n      if (key === 'p' || key === 'P') notifyChange({\n        meridiem: 'PM'\n      });\n    }\n  };\n\n  const increment = (part, inc) => {\n    let nextPart = timeParts[part];\n\n    if (part === 'meridiem') {\n      nextPart = nextPart === 'AM' ? 'PM' : 'AM';\n    } else {\n      nextPart = (nextPart || 0) + inc;\n      if (!isValid(String(nextPart), part, use12HourClock != null ? use12HourClock : false)) return;\n    }\n\n    notifyChange({\n      [part]: nextPart\n    });\n    select();\n  };\n\n  function notifyChange(updates) {\n    const nextTimeParts = Object.assign({}, timeParts, updates);\n\n    if (value && isEmptyValue(nextTimeParts, precision)) {\n      return onChange(null);\n    }\n\n    if (isPartialValue(nextTimeParts, precision)) return setTimeParts(nextTimeParts);\n    let {\n      hours,\n      minutes,\n      seconds,\n      milliseconds,\n      meridiem\n    } = nextTimeParts;\n    let nextDate = new Date(value || getDatePart());\n\n    if (use12HourClock) {\n      if (hours === 12) hours = 0;\n      hours += meridiem === 'PM' ? 12 : 0;\n    }\n\n    nextDate.setHours(hours);\n    nextDate.setMinutes(minutes);\n    if (seconds != null) nextDate.setSeconds(seconds);\n    if (milliseconds != null) nextDate.setMilliseconds(milliseconds);\n    onChange(nextDate, {\n      lastValue: value,\n      timeParts\n    });\n  }\n\n  function focusNext(input, delta) {\n    let nodes = qsa(ref.current, '* [data-focusable]');\n    let next = nodes[nodes.indexOf(input) + delta];\n    next == null ? void 0 : next.focus();\n    select(next);\n  }\n\n  const {\n    hours,\n    minutes,\n    seconds,\n    milliseconds,\n    meridiem\n  } = timeParts;\n  const showClear = !isEmptyValue(timeParts, precision);\n  return /*#__PURE__*/React.createElement(Widget, _extends({}, props, {\n    role: \"group\",\n    ref: ref\n  }, focusEvents, {\n    focused: focused,\n    disabled: disabled,\n    readOnly: readOnly,\n    className: classNames(className, 'rw-time-input rw-widget-input')\n  }), /*#__PURE__*/React.createElement(DateTimePartInput, {\n    size: 2,\n    pad: pad ? 2 : undefined,\n    value: hours,\n    disabled: disabled,\n    readOnly: readOnly,\n    \"aria-label\": \"hours\",\n    min: getMin('hours'),\n    max: getMax('hours'),\n    ref: hourRef,\n    emptyChar: emptyCharacter,\n    onSelect: handleSelect,\n    onChange: e => handleChange('hours', e),\n    onKeyDown: e => handleKeyDown('hours', e)\n  }), hoursAddon && /*#__PURE__*/React.createElement(\"span\", null, hoursAddon), /*#__PURE__*/React.createElement(DateTimePartInput, {\n    size: 2,\n    pad: pad ? 2 : undefined,\n    value: minutes,\n    disabled: disabled,\n    readOnly: readOnly,\n    \"aria-label\": \"minutes\",\n    min: getMin('minutes'),\n    max: getMax('minutes'),\n    emptyChar: emptyCharacter,\n    onSelect: handleSelect,\n    onChange: e => handleChange('minutes', e),\n    onKeyDown: e => handleKeyDown('minutes', e)\n  }), minsAddon && /*#__PURE__*/React.createElement(\"span\", null, minsAddon), (precision === 'seconds' || precision === 'milliseconds') && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DateTimePartInput, {\n    size: 2,\n    pad: pad ? 2 : undefined,\n    value: seconds,\n    disabled: disabled,\n    readOnly: readOnly,\n    \"aria-label\": \"seconds\",\n    min: getMin('seconds'),\n    max: getMax('seconds'),\n    emptyChar: emptyCharacter,\n    onSelect: handleSelect,\n    onChange: e => handleChange('seconds', e),\n    onKeyDown: e => handleKeyDown('seconds', e)\n  }), secsAddon && /*#__PURE__*/React.createElement(\"span\", null, secsAddon)), precision === 'milliseconds' && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DateTimePartInput, {\n    size: 3,\n    pad: pad ? 3 : undefined,\n    value: milliseconds,\n    disabled: disabled,\n    readOnly: readOnly,\n    \"aria-label\": \"milliseconds\",\n    min: getMin('milliseconds'),\n    max: getMax('milliseconds'),\n    emptyChar: emptyCharacter,\n    onSelect: handleSelect,\n    onChange: e => handleChange('milliseconds', e),\n    onKeyDown: e => handleKeyDown('milliseconds', e)\n  }), millisecondsAddon && /*#__PURE__*/React.createElement(\"span\", null, millisecondsAddon)), use12HourClock && /*#__PURE__*/React.createElement(\"div\", {\n    role: \"listbox\",\n    \"aria-label\": \"AM/PM\",\n    \"aria-disabled\": disabled,\n    \"aria-readonly\": readOnly,\n    className: \"rw-time-part-meridiem\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    \"data-focusable\": true,\n    role: \"option\",\n    \"aria-atomic\": true,\n    \"aria-selected\": true,\n    \"aria-setsize\": 2,\n    \"aria-live\": \"assertive\",\n    \"aria-disabled\": disabled,\n    \"aria-readonly\": readOnly,\n    \"aria-posinset\": meridiem === 'AM' ? 1 : 2,\n    tabIndex: !disabled ? 0 : void 0,\n    onFocus: handleSelect,\n    onSelect: handleSelect,\n    onKeyDown: e => handleKeyDown('meridiem', e)\n  }, /*#__PURE__*/React.createElement(\"abbr\", null, meridiem))), !noClearButton && /*#__PURE__*/React.createElement(Button, {\n    label: 'clear input',\n    onClick: handleClear,\n    disabled: disabled || readOnly,\n    className: classNames('rw-time-input-clear', showClear && 'rw-show')\n  }, times));\n}\n\nTimeInput.propTypes = propTypes;\nTimeInput.defaultProps = defaultProps;\nexport default TimeInput;","map":{"version":3,"sources":["/home/mike/proj/frontend/ui/node_modules/react-widgets/esm/TimeInput.js"],"names":["_excluded","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","classNames","qsa","PropTypes","React","useCallback","useRef","useState","useUncontrolled","Button","DateTimePartInput","times","Widget","dates","useFocusManager","selectTextRange","el","HTMLInputElement","select","range","document","createRange","selectNodeContents","selection","window","getSelection","removeAllRanges","addRange","isEmptyValue","p","precision","hours","minutes","seconds","milliseconds","isPartialValue","getValueParts","value","use12HourClock","meridiem","getHours","getMinutes","getSeconds","getMilliseconds","TEST_VALID","hours12","TEST_COMPLETE","testPart","part","tests","test","isValid","isComplete","propTypes","instanceOf","Date","onChange","func","datePart","bool","padValues","emptyCharacter","string","noClearButton","disabled","readOnly","oneOf","isRequired","hoursAddon","node","minutesAddon","secondsAddon","millisecondsAddon","defaultProps","useTimePartState","state","setState","timeParts","setTimeParts","s","TimeInput","uncontrolledProps","_useUncontrolled","pad","className","onBlur","onFocus","props","minsAddon","undefined","secsAddon","ref","hourRef","focusEvents","focused","didHandle","e","_hourRef$current","dataset","focusable","current","focus","getDatePart","startOf","getMin","getMax","activeElement","Promise","resolve","then","handleClear","_hourRef$current2","handleChange","event","currentValue","rawValue","strValue","numValue","isNaN","preventDefault","nextValue","notifyChange","focusNext","currentTarget","handleSelect","handleKeyDown","input","selectionStart","start","selectionEnd","end","isRTL","getComputedStyle","getPropertyValue","isMeridiem","isNext","isPrev","increment","inc","nextPart","String","updates","nextTimeParts","nextDate","setHours","setMinutes","setSeconds","setMilliseconds","lastValue","delta","nodes","next","showClear","createElement","role","size","min","max","emptyChar","onSelect","onKeyDown","Fragment","tabIndex","label","onClick"],"mappings":"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","sourcesContent":["const _excluded = [\"value\", \"use12HourClock\", \"padValues\", \"emptyCharacter\", \"precision\", \"noClearButton\", \"hoursAddon\", \"minutesAddon\", \"secondsAddon\", \"millisecondsAddon\", \"className\", \"disabled\", \"readOnly\", \"datePart\", \"onChange\", \"onBlur\", \"onFocus\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport classNames from 'classnames';\nimport qsa from 'dom-helpers/querySelectorAll';\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useRef, useState } from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport Button from './Button';\nimport DateTimePartInput from './DateTimePartInput';\nimport { times } from './Icon';\nimport Widget from './Widget';\nimport dates from './dates';\nimport useFocusManager from './useFocusManager';\n\nconst selectTextRange = el => {\n  if (el instanceof HTMLInputElement) return el.select();\n  const range = document.createRange();\n  range.selectNodeContents(el);\n  const selection = window.getSelection();\n\n  if (selection) {\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}; // prettier-ignore\n\n\nconst isEmptyValue = (p, precision) => p.hours == null && p.minutes == null && (precision != 'seconds' && precision !== 'milliseconds' || p.seconds == null) && (precision !== 'milliseconds' || p.milliseconds == null); // prettier-ignore\n\n\nconst isPartialValue = (p, precision) => p.hours == null || p.minutes == null || (precision === 'seconds' || precision === 'milliseconds') && p.seconds == null || precision === 'milliseconds' && p.milliseconds == null;\n\nconst getValueParts = (value, use12HourClock) => {\n  let hours, minutes, seconds, milliseconds;\n  let meridiem = 'AM';\n\n  if (value) {\n    hours = value.getHours();\n\n    if (use12HourClock) {\n      meridiem = hours < 12 ? 'AM' : 'PM';\n      hours = hours % 12 || 12;\n    }\n\n    minutes = value.getMinutes();\n    seconds = value.getSeconds();\n    milliseconds = value.getMilliseconds();\n  }\n\n  return {\n    hours,\n    minutes,\n    seconds,\n    milliseconds,\n    meridiem\n  };\n};\n\nconst TEST_VALID = {\n  hours: /^([1]?[0-9]|2[0-3])$/,\n  hours12: /^(1[0-2]|0?[1-9])$/,\n  minutes: /^([0-5]?\\d)$/,\n  seconds: /^([0-5]?\\d)$/,\n  milliseconds: /^(\\d{1,3})$/\n};\nconst TEST_COMPLETE = {\n  hours: /^([3-9]|\\d{2})$/,\n  hours12: /^(\\d{2}|[2-9])$/,\n  minutes: /^(d{2}|[6-9])$/,\n  seconds: /^(d{2}|[6-9])$/,\n  milliseconds: /^(\\d{3})$/\n};\n\nfunction testPart(value, part, use12HourClock, tests) {\n  const key = part === 'hours' && use12HourClock ? 'hours12' : part;\n  return tests[key].test(value);\n}\n\nconst isValid = (value, part, use12HourClock) => testPart(value, part, use12HourClock, TEST_VALID);\n\nconst isComplete = (value, part, use12HourClock) => testPart(value, part, use12HourClock, TEST_COMPLETE);\n\nconst propTypes = {\n  /**\n   * @example ['valuePicker', [ ['new Date()'] ]]\n   */\n  value: PropTypes.instanceOf(Date),\n\n  /**\n   * @example ['onChangePicker', [ ['new Date()'] ]]\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The default date used to construct a new time when the `value` is empty\n   *\n   * @default new Date()\n   **/\n  datePart: PropTypes.instanceOf(Date),\n\n  /**\n   * Use a 12 hour clock (with AM/PM) instead of 24 hour one.\n   * The configured localizer may provide a default value .\n   **/\n  use12HourClock: PropTypes.bool,\n\n  /** Time part values will be padded by `0` */\n  padValues: PropTypes.bool,\n\n  /** The string character used to pad empty, or cleared values */\n  emptyCharacter: PropTypes.string,\n\n  /** Hide the input clear button */\n  noClearButton: PropTypes.bool,\n\n  /**\n   * @example ['disabled', ['new Date()']]\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @example ['readOnly', ['new Date()']]\n   */\n  readOnly: PropTypes.bool,\n\n  /** Controls how precise of a time can be input **/\n  precision: PropTypes.oneOf(['minutes', 'seconds', 'milliseconds']).isRequired,\n\n  /**\n   * The seperator between hours and minutes\n   * @default ':'\n   */\n  hoursAddon: PropTypes.node,\n\n  /**\n   * The seperator between hours and minutes\n   * @default ':'\n   */\n  minutesAddon: PropTypes.node,\n\n  /**\n   * The seperator between hours and minutes\n   * @default ':'\n   */\n  secondsAddon: PropTypes.node,\n\n  /**\n   * The seperator between hours and minutes\n   * @default '.'\n   */\n  millisecondsAddon: PropTypes.node\n};\nconst defaultProps = {\n  hoursAddon: ':',\n  padValues: true,\n  precision: 'minutes',\n  emptyCharacter: '-'\n};\n\n// let count = 0\nfunction useTimePartState(value, use12HourClock) {\n  const [state, setState] = useState(() => ({\n    value,\n    use12HourClock,\n    timeParts: getValueParts(value, use12HourClock)\n  }));\n  const setTimeParts = useCallback(timeParts => setState(s => Object.assign({}, s, {\n    timeParts\n  })), [setState]);\n\n  if (state.value !== value || state.use12HourClock !== use12HourClock) {\n    // count++\n    // if (count < 100)\n    setState({\n      value,\n      use12HourClock,\n      timeParts: getValueParts(value, use12HourClock)\n    });\n  }\n\n  return [state.timeParts, setTimeParts];\n}\n\nfunction TimeInput(uncontrolledProps) {\n  const _useUncontrolled = useUncontrolled(uncontrolledProps, {\n    value: 'onChange'\n  }),\n        {\n    value,\n    use12HourClock,\n    padValues: pad,\n    emptyCharacter,\n    precision,\n    noClearButton,\n    hoursAddon,\n    minutesAddon,\n    secondsAddon,\n    millisecondsAddon,\n    className,\n    disabled,\n    readOnly,\n    datePart,\n    onChange,\n    onBlur,\n    onFocus\n  } = _useUncontrolled,\n        props = _objectWithoutPropertiesLoose(_useUncontrolled, _excluded);\n\n  let minsAddon = minutesAddon !== undefined ? minutesAddon : precision === 'seconds' || precision === 'milliseconds' ? ':' : '';\n  let secsAddon = secondsAddon !== undefined ? secondsAddon : precision === 'milliseconds' ? ':' : '';\n  const ref = useRef(null);\n  const hourRef = useRef(null);\n  const [focusEvents, focused] = useFocusManager(ref, {\n    disabled,\n    onBlur,\n    onFocus\n  }, {\n    didHandle: (focused, e) => {\n      var _hourRef$current;\n\n      if (!focused) return;\n      if (!e.target.dataset.focusable) (_hourRef$current = hourRef.current) == null ? void 0 : _hourRef$current.focus();else select(e.target);\n    }\n  });\n  const [timeParts, setTimeParts] = useTimePartState(value != null ? value : null, use12HourClock != null ? use12HourClock : false);\n\n  function getDatePart() {\n    return dates.startOf(datePart || new Date(), 'day');\n  }\n\n  const getMin = part => part === 'hours' ? 1 : 0;\n\n  const getMax = part => {\n    if (part === 'hours') return use12HourClock ? 12 : 23;\n    if (part === 'milliseconds') return 999;\n    return 59;\n  };\n\n  function select(target = document.activeElement) {\n    window.Promise.resolve().then(() => {\n      if (focused) selectTextRange(target);\n    });\n  }\n  /**\n   * Handlers\n   */\n\n\n  const handleClear = () => {\n    var _hourRef$current2;\n\n    (_hourRef$current2 = hourRef.current) == null ? void 0 : _hourRef$current2.focus();\n    if (value) onChange(null);else setTimeParts(getValueParts(null));\n  };\n\n  const handleChange = (part, event) => {\n    const currentValue = timeParts[part];\n    const {\n      target\n    } = event;\n    const rawValue = target.value;\n    let strValue = `${currentValue || ''}${rawValue}`;\n    let numValue = +strValue;\n\n    if (isNaN(numValue) || strValue && !isValid(strValue, part, use12HourClock != null ? use12HourClock : false)) {\n      // the combined value is now past the max or invalid so try the single\n      // digit and \"start over\" filling the value\n      if (isValid(rawValue, part, use12HourClock != null ? use12HourClock : false) && !isNaN(+rawValue)) {\n        // change the effective current value\n        strValue = rawValue;\n        numValue = +rawValue;\n      } else {\n        return event.preventDefault();\n      }\n    }\n\n    const nextValue = target.value ? numValue : null;\n    notifyChange({\n      [part]: nextValue\n    });\n\n    if (nextValue != null && isComplete(strValue, part, use12HourClock != null ? use12HourClock : false)) {\n      focusNext(event.currentTarget, +1);\n    } else {\n      select(target);\n    }\n  };\n\n  const handleSelect = ({\n    target\n  }) => {\n    select(target);\n  };\n\n  const handleKeyDown = (part, event) => {\n    const {\n      key\n    } = event;\n    const input = event.currentTarget;\n    const {\n      selectionStart: start,\n      selectionEnd: end\n    } = input;\n    const isRTL = getComputedStyle(input).getPropertyValue('direction') === 'rtl';\n    const isMeridiem = part === 'meridiem';\n    const isNext = key === (isRTL ? 'ArrowLeft' : 'ArrowRight');\n    const isPrev = key === (isRTL ? 'ArrowRight' : 'ArrowLeft');\n\n    if (key === 'ArrowUp') {\n      event.preventDefault();\n      increment(part, 1);\n    }\n\n    if (key === 'ArrowDown') {\n      event.preventDefault();\n      increment(part, -1);\n    }\n\n    if (isPrev && (isMeridiem || start - 1 < 0)) {\n      event.preventDefault();\n      focusNext(input, -1);\n    }\n\n    if (isNext && (isMeridiem || input.value.length <= end + 1)) {\n      event.preventDefault();\n      focusNext(input, +1);\n    }\n\n    if (readOnly && key !== 'Tab') {\n      event.preventDefault();\n    }\n\n    if (isMeridiem) {\n      if (key === 'a' || key === 'A') notifyChange({\n        meridiem: 'AM'\n      });\n      if (key === 'p' || key === 'P') notifyChange({\n        meridiem: 'PM'\n      });\n    }\n  };\n\n  const increment = (part, inc) => {\n    let nextPart = timeParts[part];\n\n    if (part === 'meridiem') {\n      nextPart = nextPart === 'AM' ? 'PM' : 'AM';\n    } else {\n      nextPart = (nextPart || 0) + inc;\n      if (!isValid(String(nextPart), part, use12HourClock != null ? use12HourClock : false)) return;\n    }\n\n    notifyChange({\n      [part]: nextPart\n    });\n    select();\n  };\n\n  function notifyChange(updates) {\n    const nextTimeParts = Object.assign({}, timeParts, updates);\n\n    if (value && isEmptyValue(nextTimeParts, precision)) {\n      return onChange(null);\n    }\n\n    if (isPartialValue(nextTimeParts, precision)) return setTimeParts(nextTimeParts);\n    let {\n      hours,\n      minutes,\n      seconds,\n      milliseconds,\n      meridiem\n    } = nextTimeParts;\n    let nextDate = new Date(value || getDatePart());\n\n    if (use12HourClock) {\n      if (hours === 12) hours = 0;\n      hours += meridiem === 'PM' ? 12 : 0;\n    }\n\n    nextDate.setHours(hours);\n    nextDate.setMinutes(minutes);\n    if (seconds != null) nextDate.setSeconds(seconds);\n    if (milliseconds != null) nextDate.setMilliseconds(milliseconds);\n    onChange(nextDate, {\n      lastValue: value,\n      timeParts\n    });\n  }\n\n  function focusNext(input, delta) {\n    let nodes = qsa(ref.current, '* [data-focusable]');\n    let next = nodes[nodes.indexOf(input) + delta];\n    next == null ? void 0 : next.focus();\n    select(next);\n  }\n\n  const {\n    hours,\n    minutes,\n    seconds,\n    milliseconds,\n    meridiem\n  } = timeParts;\n  const showClear = !isEmptyValue(timeParts, precision);\n  return /*#__PURE__*/React.createElement(Widget, _extends({}, props, {\n    role: \"group\",\n    ref: ref\n  }, focusEvents, {\n    focused: focused,\n    disabled: disabled,\n    readOnly: readOnly,\n    className: classNames(className, 'rw-time-input rw-widget-input')\n  }), /*#__PURE__*/React.createElement(DateTimePartInput, {\n    size: 2,\n    pad: pad ? 2 : undefined,\n    value: hours,\n    disabled: disabled,\n    readOnly: readOnly,\n    \"aria-label\": \"hours\",\n    min: getMin('hours'),\n    max: getMax('hours'),\n    ref: hourRef,\n    emptyChar: emptyCharacter,\n    onSelect: handleSelect,\n    onChange: e => handleChange('hours', e),\n    onKeyDown: e => handleKeyDown('hours', e)\n  }), hoursAddon && /*#__PURE__*/React.createElement(\"span\", null, hoursAddon), /*#__PURE__*/React.createElement(DateTimePartInput, {\n    size: 2,\n    pad: pad ? 2 : undefined,\n    value: minutes,\n    disabled: disabled,\n    readOnly: readOnly,\n    \"aria-label\": \"minutes\",\n    min: getMin('minutes'),\n    max: getMax('minutes'),\n    emptyChar: emptyCharacter,\n    onSelect: handleSelect,\n    onChange: e => handleChange('minutes', e),\n    onKeyDown: e => handleKeyDown('minutes', e)\n  }), minsAddon && /*#__PURE__*/React.createElement(\"span\", null, minsAddon), (precision === 'seconds' || precision === 'milliseconds') && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DateTimePartInput, {\n    size: 2,\n    pad: pad ? 2 : undefined,\n    value: seconds,\n    disabled: disabled,\n    readOnly: readOnly,\n    \"aria-label\": \"seconds\",\n    min: getMin('seconds'),\n    max: getMax('seconds'),\n    emptyChar: emptyCharacter,\n    onSelect: handleSelect,\n    onChange: e => handleChange('seconds', e),\n    onKeyDown: e => handleKeyDown('seconds', e)\n  }), secsAddon && /*#__PURE__*/React.createElement(\"span\", null, secsAddon)), precision === 'milliseconds' && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DateTimePartInput, {\n    size: 3,\n    pad: pad ? 3 : undefined,\n    value: milliseconds,\n    disabled: disabled,\n    readOnly: readOnly,\n    \"aria-label\": \"milliseconds\",\n    min: getMin('milliseconds'),\n    max: getMax('milliseconds'),\n    emptyChar: emptyCharacter,\n    onSelect: handleSelect,\n    onChange: e => handleChange('milliseconds', e),\n    onKeyDown: e => handleKeyDown('milliseconds', e)\n  }), millisecondsAddon && /*#__PURE__*/React.createElement(\"span\", null, millisecondsAddon)), use12HourClock && /*#__PURE__*/React.createElement(\"div\", {\n    role: \"listbox\",\n    \"aria-label\": \"AM/PM\",\n    \"aria-disabled\": disabled,\n    \"aria-readonly\": readOnly,\n    className: \"rw-time-part-meridiem\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    \"data-focusable\": true,\n    role: \"option\",\n    \"aria-atomic\": true,\n    \"aria-selected\": true,\n    \"aria-setsize\": 2,\n    \"aria-live\": \"assertive\",\n    \"aria-disabled\": disabled,\n    \"aria-readonly\": readOnly,\n    \"aria-posinset\": meridiem === 'AM' ? 1 : 2,\n    tabIndex: !disabled ? 0 : void 0,\n    onFocus: handleSelect,\n    onSelect: handleSelect,\n    onKeyDown: e => handleKeyDown('meridiem', e)\n  }, /*#__PURE__*/React.createElement(\"abbr\", null, meridiem))), !noClearButton && /*#__PURE__*/React.createElement(Button, {\n    label: 'clear input',\n    onClick: handleClear,\n    disabled: disabled || readOnly,\n    className: classNames('rw-time-input-clear', showClear && 'rw-show')\n  }, times));\n}\n\nTimeInput.propTypes = propTypes;\nTimeInput.defaultProps = defaultProps;\nexport default TimeInput;"]},"metadata":{},"sourceType":"module"}