{"ast":null,"code":"import toDate from \"../toDate/index.js\";\nimport setMonth from \"../setMonth/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name set\n * @category Common Helpers\n * @summary Set date values to a given date.\n *\n * @description\n * Set date values to a given date.\n *\n * Sets time values to date from object `values`.\n * A value is not set if it is undefined or null or doesn't exist in `values`.\n *\n * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\n * to use native `Date#setX` methods. If you use this function, you may not want to include the\n * other `setX` functions that date-fns provides if you are concerned about the bundle size.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Object} values - an object with options\n * @param {Number} [values.year] - the number of years to be set\n * @param {Number} [values.month] - the number of months to be set\n * @param {Number} [values.date] - the number of days to be set\n * @param {Number} [values.hours] - the number of hours to be set\n * @param {Number} [values.minutes] - the number of minutes to be set\n * @param {Number} [values.seconds] - the number of seconds to be set\n * @param {Number} [values.milliseconds] - the number of milliseconds to be set\n * @returns {Date} the new date with options set\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `values` must be an object\n *\n * @example\n * // Transform 1 September 2014 into 20 October 2015 in a single line:\n * var result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\n * //=> Tue Oct 20 2015 00:00:00\n *\n * @example\n * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\n * var result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\n * //=> Mon Sep 01 2014 12:23:45\n */\n\nexport default function set(dirtyDate, values) {\n  requiredArgs(2, arguments);\n\n  if (typeof values !== 'object' || values === null) {\n    throw new RangeError('values parameter must be an object');\n  }\n\n  var date = toDate(dirtyDate); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n\n  if (isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n\n  if (values.year != null) {\n    date.setFullYear(values.year);\n  }\n\n  if (values.month != null) {\n    date = setMonth(date, values.month);\n  }\n\n  if (values.date != null) {\n    date.setDate(toInteger(values.date));\n  }\n\n  if (values.hours != null) {\n    date.setHours(toInteger(values.hours));\n  }\n\n  if (values.minutes != null) {\n    date.setMinutes(toInteger(values.minutes));\n  }\n\n  if (values.seconds != null) {\n    date.setSeconds(toInteger(values.seconds));\n  }\n\n  if (values.milliseconds != null) {\n    date.setMilliseconds(toInteger(values.milliseconds));\n  }\n\n  return date;\n}","map":{"version":3,"sources":["/home/mike/proj/frontend/ui/node_modules/date-fns/esm/set/index.js"],"names":["toDate","setMonth","toInteger","requiredArgs","set","dirtyDate","values","arguments","RangeError","date","isNaN","getTime","Date","NaN","year","setFullYear","month","setDate","hours","setHours","minutes","setMinutes","seconds","setSeconds","milliseconds","setMilliseconds"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,GAAT,CAAaC,SAAb,EAAwBC,MAAxB,EAAgC;AAC7CH,EAAAA,YAAY,CAAC,CAAD,EAAII,SAAJ,CAAZ;;AAEA,MAAI,OAAOD,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,KAAK,IAA7C,EAAmD;AACjD,UAAM,IAAIE,UAAJ,CAAe,oCAAf,CAAN;AACD;;AAED,MAAIC,IAAI,GAAGT,MAAM,CAACK,SAAD,CAAjB,CAP6C,CAOf;;AAE9B,MAAIK,KAAK,CAACD,IAAI,CAACE,OAAL,EAAD,CAAT,EAA2B;AACzB,WAAO,IAAIC,IAAJ,CAASC,GAAT,CAAP;AACD;;AAED,MAAIP,MAAM,CAACQ,IAAP,IAAe,IAAnB,EAAyB;AACvBL,IAAAA,IAAI,CAACM,WAAL,CAAiBT,MAAM,CAACQ,IAAxB;AACD;;AAED,MAAIR,MAAM,CAACU,KAAP,IAAgB,IAApB,EAA0B;AACxBP,IAAAA,IAAI,GAAGR,QAAQ,CAACQ,IAAD,EAAOH,MAAM,CAACU,KAAd,CAAf;AACD;;AAED,MAAIV,MAAM,CAACG,IAAP,IAAe,IAAnB,EAAyB;AACvBA,IAAAA,IAAI,CAACQ,OAAL,CAAaf,SAAS,CAACI,MAAM,CAACG,IAAR,CAAtB;AACD;;AAED,MAAIH,MAAM,CAACY,KAAP,IAAgB,IAApB,EAA0B;AACxBT,IAAAA,IAAI,CAACU,QAAL,CAAcjB,SAAS,CAACI,MAAM,CAACY,KAAR,CAAvB;AACD;;AAED,MAAIZ,MAAM,CAACc,OAAP,IAAkB,IAAtB,EAA4B;AAC1BX,IAAAA,IAAI,CAACY,UAAL,CAAgBnB,SAAS,CAACI,MAAM,CAACc,OAAR,CAAzB;AACD;;AAED,MAAId,MAAM,CAACgB,OAAP,IAAkB,IAAtB,EAA4B;AAC1Bb,IAAAA,IAAI,CAACc,UAAL,CAAgBrB,SAAS,CAACI,MAAM,CAACgB,OAAR,CAAzB;AACD;;AAED,MAAIhB,MAAM,CAACkB,YAAP,IAAuB,IAA3B,EAAiC;AAC/Bf,IAAAA,IAAI,CAACgB,eAAL,CAAqBvB,SAAS,CAACI,MAAM,CAACkB,YAAR,CAA9B;AACD;;AAED,SAAOf,IAAP;AACD","sourcesContent":["import toDate from \"../toDate/index.js\";\nimport setMonth from \"../setMonth/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name set\n * @category Common Helpers\n * @summary Set date values to a given date.\n *\n * @description\n * Set date values to a given date.\n *\n * Sets time values to date from object `values`.\n * A value is not set if it is undefined or null or doesn't exist in `values`.\n *\n * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\n * to use native `Date#setX` methods. If you use this function, you may not want to include the\n * other `setX` functions that date-fns provides if you are concerned about the bundle size.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Object} values - an object with options\n * @param {Number} [values.year] - the number of years to be set\n * @param {Number} [values.month] - the number of months to be set\n * @param {Number} [values.date] - the number of days to be set\n * @param {Number} [values.hours] - the number of hours to be set\n * @param {Number} [values.minutes] - the number of minutes to be set\n * @param {Number} [values.seconds] - the number of seconds to be set\n * @param {Number} [values.milliseconds] - the number of milliseconds to be set\n * @returns {Date} the new date with options set\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `values` must be an object\n *\n * @example\n * // Transform 1 September 2014 into 20 October 2015 in a single line:\n * var result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\n * //=> Tue Oct 20 2015 00:00:00\n *\n * @example\n * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\n * var result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\n * //=> Mon Sep 01 2014 12:23:45\n */\nexport default function set(dirtyDate, values) {\n  requiredArgs(2, arguments);\n\n  if (typeof values !== 'object' || values === null) {\n    throw new RangeError('values parameter must be an object');\n  }\n\n  var date = toDate(dirtyDate); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n\n  if (isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n\n  if (values.year != null) {\n    date.setFullYear(values.year);\n  }\n\n  if (values.month != null) {\n    date = setMonth(date, values.month);\n  }\n\n  if (values.date != null) {\n    date.setDate(toInteger(values.date));\n  }\n\n  if (values.hours != null) {\n    date.setHours(toInteger(values.hours));\n  }\n\n  if (values.minutes != null) {\n    date.setMinutes(toInteger(values.minutes));\n  }\n\n  if (values.seconds != null) {\n    date.setSeconds(toInteger(values.seconds));\n  }\n\n  if (values.milliseconds != null) {\n    date.setMilliseconds(toInteger(values.milliseconds));\n  }\n\n  return date;\n}"]},"metadata":{},"sourceType":"module"}