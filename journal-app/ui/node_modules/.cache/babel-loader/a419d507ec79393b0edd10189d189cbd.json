{"ast":null,"code":"const LocaleHelper = require('../../LocaleHelper/LocaleHelper.js');\n\nconst Format = require('../../Format/Format.js');\n\nconst timezoneNames = require('../../data/timezoneNames.js'); // lots of 24h time such as \"23:59\", \"T23:59:59+0700\", \"23:59:59 GMT-05:00\", \"23:59:59 CST\", \"T23:59:59Z\"\n\n\nconst time24Hours = new Format({\n  /* prettier-ignore */\n  //           $1                               $2        $3           $4              $5                                $6                 $7\n  template: '^(.*?)_SPACE_*(?:at|on|T|)_SPACE_*(_H24_)\\\\:(_MIN_)(?:\\\\:(_SEC_)(?:[\\\\.,](_MS_))?)?_SPACE_*(?:GMT)?_SPACE_*(_OFFSET_)?_SPACE_*(_ZONE_)?$',\n  handler: function (matches, locale) {\n    let [, dateExpr, hour, minute, second, millisecond, offset, zone] = matches;\n    let result = {};\n\n    if (dateExpr) {\n      result = this.parser.attempt(dateExpr, locale);\n\n      if (result.invalid) {\n        return result;\n      }\n    }\n\n    result.hour = hour;\n    result.minute = minute;\n\n    if (second) {\n      result.second = second;\n    }\n\n    if (millisecond && millisecond.length > 3) {\n      result.millisecond = millisecond.slice(0, 3);\n    } else if (millisecond) {\n      result.millisecond = millisecond;\n    }\n\n    if (zone && !offset && zone in timezoneNames) {\n      result.offset = timezoneNames[zone];\n    } else if (offset) {\n      const locHelper = LocaleHelper.factory(locale);\n      result.offset = locHelper.offsetToMinutes(offset);\n    }\n\n    return result;\n  }\n});\nmodule.exports = time24Hours;","map":{"version":3,"sources":["/home/mike/proj/frontend/ui/node_modules/any-date-parser/src/formats/time24Hours/time24Hours.js"],"names":["LocaleHelper","require","Format","timezoneNames","time24Hours","template","handler","matches","locale","dateExpr","hour","minute","second","millisecond","offset","zone","result","parser","attempt","invalid","length","slice","locHelper","factory","offsetToMinutes","module","exports"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAAC,oCAAD,CAA5B;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,wBAAD,CAAtB;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,6BAAD,CAA7B,C,CAEA;;;AACA,MAAMG,WAAW,GAAG,IAAIF,MAAJ,CAAW;AAC9B;AACA;AACAG,EAAAA,QAAQ,EAAE,0IAHoB;AAI9BC,EAAAA,OAAO,EAAE,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AACnC,QAAI,GAAGC,QAAH,EAAaC,IAAb,EAAmBC,MAAnB,EAA2BC,MAA3B,EAAmCC,WAAnC,EAAgDC,MAAhD,EAAwDC,IAAxD,IAAgER,OAApE;AACA,QAAIS,MAAM,GAAG,EAAb;;AACA,QAAIP,QAAJ,EAAc;AACbO,MAAAA,MAAM,GAAG,KAAKC,MAAL,CAAYC,OAAZ,CAAoBT,QAApB,EAA8BD,MAA9B,CAAT;;AACA,UAAIQ,MAAM,CAACG,OAAX,EAAoB;AACnB,eAAOH,MAAP;AACA;AACD;;AACDA,IAAAA,MAAM,CAACN,IAAP,GAAcA,IAAd;AACAM,IAAAA,MAAM,CAACL,MAAP,GAAgBA,MAAhB;;AACA,QAAIC,MAAJ,EAAY;AACXI,MAAAA,MAAM,CAACJ,MAAP,GAAgBA,MAAhB;AACA;;AACD,QAAIC,WAAW,IAAIA,WAAW,CAACO,MAAZ,GAAqB,CAAxC,EAA2C;AAC1CJ,MAAAA,MAAM,CAACH,WAAP,GAAqBA,WAAW,CAACQ,KAAZ,CAAkB,CAAlB,EAAqB,CAArB,CAArB;AACA,KAFD,MAEO,IAAIR,WAAJ,EAAiB;AACvBG,MAAAA,MAAM,CAACH,WAAP,GAAqBA,WAArB;AACA;;AACD,QAAIE,IAAI,IAAI,CAACD,MAAT,IAAmBC,IAAI,IAAIZ,aAA/B,EAA8C;AAC7Ca,MAAAA,MAAM,CAACF,MAAP,GAAgBX,aAAa,CAACY,IAAD,CAA7B;AACA,KAFD,MAEO,IAAID,MAAJ,EAAY;AAClB,YAAMQ,SAAS,GAAGtB,YAAY,CAACuB,OAAb,CAAqBf,MAArB,CAAlB;AACAQ,MAAAA,MAAM,CAACF,MAAP,GAAgBQ,SAAS,CAACE,eAAV,CAA0BV,MAA1B,CAAhB;AACA;;AACD,WAAOE,MAAP;AACA;AA9B6B,CAAX,CAApB;AAiCAS,MAAM,CAACC,OAAP,GAAiBtB,WAAjB","sourcesContent":["const LocaleHelper = require('../../LocaleHelper/LocaleHelper.js');\nconst Format = require('../../Format/Format.js');\nconst timezoneNames = require('../../data/timezoneNames.js');\n\n// lots of 24h time such as \"23:59\", \"T23:59:59+0700\", \"23:59:59 GMT-05:00\", \"23:59:59 CST\", \"T23:59:59Z\"\nconst time24Hours = new Format({\n\t/* prettier-ignore */\n\t//           $1                               $2        $3           $4              $5                                $6                 $7\n\ttemplate: '^(.*?)_SPACE_*(?:at|on|T|)_SPACE_*(_H24_)\\\\:(_MIN_)(?:\\\\:(_SEC_)(?:[\\\\.,](_MS_))?)?_SPACE_*(?:GMT)?_SPACE_*(_OFFSET_)?_SPACE_*(_ZONE_)?$',\n\thandler: function (matches, locale) {\n\t\tlet [, dateExpr, hour, minute, second, millisecond, offset, zone] = matches;\n\t\tlet result = {};\n\t\tif (dateExpr) {\n\t\t\tresult = this.parser.attempt(dateExpr, locale);\n\t\t\tif (result.invalid) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\tresult.hour = hour;\n\t\tresult.minute = minute;\n\t\tif (second) {\n\t\t\tresult.second = second;\n\t\t}\n\t\tif (millisecond && millisecond.length > 3) {\n\t\t\tresult.millisecond = millisecond.slice(0, 3);\n\t\t} else if (millisecond) {\n\t\t\tresult.millisecond = millisecond;\n\t\t}\n\t\tif (zone && !offset && zone in timezoneNames) {\n\t\t\tresult.offset = timezoneNames[zone];\n\t\t} else if (offset) {\n\t\t\tconst locHelper = LocaleHelper.factory(locale);\n\t\t\tresult.offset = locHelper.offsetToMinutes(offset);\n\t\t}\n\t\treturn result;\n\t},\n});\n\nmodule.exports = time24Hours;\n"]},"metadata":{},"sourceType":"script"}