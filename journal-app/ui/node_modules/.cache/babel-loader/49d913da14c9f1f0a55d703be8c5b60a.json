{"ast":null,"code":"import { useCallback, useRef } from 'react';\nimport useEventCallback from './useEventCallback';\nimport useMounted from './useMounted';\n/**\n * useFocusManager provides a way to track and manage focus as it moves around\n * a container element. An `onChange` is fired when focus enters or leaves the\n * element, but not when it moves around inside the element, similar to\n * `pointerenter` and `pointerleave` DOM events.\n *\n * ```tsx\n * const [focused, setFocusState] = useState(false)\n *\n * const { onBlur, onFocus } = useFocusManager({\n *   onChange: nextFocused => setFocusState(nextFocused)\n * })\n *\n * return (\n *   <div tabIndex=\"-1\" onFocus={onFocus} onBlur={onBlur}>\n *     {String(focused)}\n *     <input />\n *     <input />\n *\n *     <button>A button</button>\n *   </div>\n * ```\n *\n */\n\nexport default function useFocusManager(opts) {\n  var isMounted = useMounted();\n  var lastFocused = useRef();\n  var handle = useRef();\n  var willHandle = useEventCallback(opts.willHandle);\n  var didHandle = useEventCallback(opts.didHandle);\n  var onChange = useEventCallback(opts.onChange);\n  var isDisabled = useEventCallback(opts.isDisabled);\n  var handleFocusChange = useCallback(function (focused, event) {\n    if (event && event.persist) event.persist();\n    if (willHandle && willHandle(focused, event) === false) return;\n    clearTimeout(handle.current);\n    handle.current = window.setTimeout(function () {\n      if (focused !== lastFocused.current) {\n        if (didHandle) didHandle(focused, event); // only fire a change when unmounted if its a blur\n\n        if (isMounted() || !focused) {\n          lastFocused.current = focused;\n          onChange && onChange(focused, event);\n        }\n      }\n    });\n  }, [isMounted, willHandle, didHandle, onChange, lastFocused]);\n  var handleBlur = useCallback(function (event) {\n    if (!isDisabled()) handleFocusChange(false, event);\n  }, [handleFocusChange, isDisabled]);\n  var handleFocus = useCallback(function (event) {\n    if (!isDisabled()) handleFocusChange(true, event);\n  }, [handleFocusChange, isDisabled]);\n  return {\n    onBlur: handleBlur,\n    onFocus: handleFocus\n  };\n}","map":{"version":3,"sources":["/home/mike/proj/frontend/ui/node_modules/react-widgets/node_modules/@restart/hooks/esm/useFocusManager.js"],"names":["useCallback","useRef","useEventCallback","useMounted","useFocusManager","opts","isMounted","lastFocused","handle","willHandle","didHandle","onChange","isDisabled","handleFocusChange","focused","event","persist","clearTimeout","current","window","setTimeout","handleBlur","handleFocus","onBlur","onFocus"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,QAAoC,OAApC;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;AAC5C,MAAIC,SAAS,GAAGH,UAAU,EAA1B;AACA,MAAII,WAAW,GAAGN,MAAM,EAAxB;AACA,MAAIO,MAAM,GAAGP,MAAM,EAAnB;AACA,MAAIQ,UAAU,GAAGP,gBAAgB,CAACG,IAAI,CAACI,UAAN,CAAjC;AACA,MAAIC,SAAS,GAAGR,gBAAgB,CAACG,IAAI,CAACK,SAAN,CAAhC;AACA,MAAIC,QAAQ,GAAGT,gBAAgB,CAACG,IAAI,CAACM,QAAN,CAA/B;AACA,MAAIC,UAAU,GAAGV,gBAAgB,CAACG,IAAI,CAACO,UAAN,CAAjC;AACA,MAAIC,iBAAiB,GAAGb,WAAW,CAAC,UAAUc,OAAV,EAAmBC,KAAnB,EAA0B;AAC5D,QAAIA,KAAK,IAAIA,KAAK,CAACC,OAAnB,EAA4BD,KAAK,CAACC,OAAN;AAC5B,QAAIP,UAAU,IAAIA,UAAU,CAACK,OAAD,EAAUC,KAAV,CAAV,KAA+B,KAAjD,EAAwD;AACxDE,IAAAA,YAAY,CAACT,MAAM,CAACU,OAAR,CAAZ;AACAV,IAAAA,MAAM,CAACU,OAAP,GAAiBC,MAAM,CAACC,UAAP,CAAkB,YAAY;AAC7C,UAAIN,OAAO,KAAKP,WAAW,CAACW,OAA5B,EAAqC;AACnC,YAAIR,SAAJ,EAAeA,SAAS,CAACI,OAAD,EAAUC,KAAV,CAAT,CADoB,CACO;;AAE1C,YAAIT,SAAS,MAAM,CAACQ,OAApB,EAA6B;AAC3BP,UAAAA,WAAW,CAACW,OAAZ,GAAsBJ,OAAtB;AACAH,UAAAA,QAAQ,IAAIA,QAAQ,CAACG,OAAD,EAAUC,KAAV,CAApB;AACD;AACF;AACF,KATgB,CAAjB;AAUD,GAdkC,EAchC,CAACT,SAAD,EAAYG,UAAZ,EAAwBC,SAAxB,EAAmCC,QAAnC,EAA6CJ,WAA7C,CAdgC,CAAnC;AAeA,MAAIc,UAAU,GAAGrB,WAAW,CAAC,UAAUe,KAAV,EAAiB;AAC5C,QAAI,CAACH,UAAU,EAAf,EAAmBC,iBAAiB,CAAC,KAAD,EAAQE,KAAR,CAAjB;AACpB,GAF2B,EAEzB,CAACF,iBAAD,EAAoBD,UAApB,CAFyB,CAA5B;AAGA,MAAIU,WAAW,GAAGtB,WAAW,CAAC,UAAUe,KAAV,EAAiB;AAC7C,QAAI,CAACH,UAAU,EAAf,EAAmBC,iBAAiB,CAAC,IAAD,EAAOE,KAAP,CAAjB;AACpB,GAF4B,EAE1B,CAACF,iBAAD,EAAoBD,UAApB,CAF0B,CAA7B;AAGA,SAAO;AACLW,IAAAA,MAAM,EAAEF,UADH;AAELG,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID","sourcesContent":["import { useCallback, useRef } from 'react';\nimport useEventCallback from './useEventCallback';\nimport useMounted from './useMounted';\n\n/**\n * useFocusManager provides a way to track and manage focus as it moves around\n * a container element. An `onChange` is fired when focus enters or leaves the\n * element, but not when it moves around inside the element, similar to\n * `pointerenter` and `pointerleave` DOM events.\n *\n * ```tsx\n * const [focused, setFocusState] = useState(false)\n *\n * const { onBlur, onFocus } = useFocusManager({\n *   onChange: nextFocused => setFocusState(nextFocused)\n * })\n *\n * return (\n *   <div tabIndex=\"-1\" onFocus={onFocus} onBlur={onBlur}>\n *     {String(focused)}\n *     <input />\n *     <input />\n *\n *     <button>A button</button>\n *   </div>\n * ```\n *\n */\nexport default function useFocusManager(opts) {\n  var isMounted = useMounted();\n  var lastFocused = useRef();\n  var handle = useRef();\n  var willHandle = useEventCallback(opts.willHandle);\n  var didHandle = useEventCallback(opts.didHandle);\n  var onChange = useEventCallback(opts.onChange);\n  var isDisabled = useEventCallback(opts.isDisabled);\n  var handleFocusChange = useCallback(function (focused, event) {\n    if (event && event.persist) event.persist();\n    if (willHandle && willHandle(focused, event) === false) return;\n    clearTimeout(handle.current);\n    handle.current = window.setTimeout(function () {\n      if (focused !== lastFocused.current) {\n        if (didHandle) didHandle(focused, event); // only fire a change when unmounted if its a blur\n\n        if (isMounted() || !focused) {\n          lastFocused.current = focused;\n          onChange && onChange(focused, event);\n        }\n      }\n    });\n  }, [isMounted, willHandle, didHandle, onChange, lastFocused]);\n  var handleBlur = useCallback(function (event) {\n    if (!isDisabled()) handleFocusChange(false, event);\n  }, [handleFocusChange, isDisabled]);\n  var handleFocus = useCallback(function (event) {\n    if (!isDisabled()) handleFocusChange(true, event);\n  }, [handleFocusChange, isDisabled]);\n  return {\n    onBlur: handleBlur,\n    onFocus: handleFocus\n  };\n}"]},"metadata":{},"sourceType":"module"}