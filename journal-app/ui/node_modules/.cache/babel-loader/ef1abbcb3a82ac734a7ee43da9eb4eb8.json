{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HIDE_TIMEOUT = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.OverlayComponent = OverlayComponent;\nexports.defaultFormat = defaultFormat;\nexports.defaultParse = defaultParse;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _DayPicker = require('./DayPicker');\n\nvar _DayPicker2 = _interopRequireDefault(_DayPicker);\n\nvar _DateUtils = require('./DateUtils');\n\nvar _ModifiersUtils = require('./ModifiersUtils');\n\nvar _keys = require('./keys');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n} // When clicking on a day cell, overlay will be hidden after this timeout\n\n\nvar HIDE_TIMEOUT = exports.HIDE_TIMEOUT = 100;\n/**\n * The default component used as Overlay.\n *\n * @param {Object} props\n */\n\nfunction OverlayComponent(_ref) {\n  var input = _ref.input,\n      selectedDay = _ref.selectedDay,\n      month = _ref.month,\n      children = _ref.children,\n      classNames = _ref.classNames,\n      props = _objectWithoutProperties(_ref, ['input', 'selectedDay', 'month', 'children', 'classNames']);\n\n  return _react2.default.createElement('div', _extends({\n    className: classNames.overlayWrapper\n  }, props), _react2.default.createElement('div', {\n    className: classNames.overlay\n  }, children));\n}\n/**\n * The default function used to format a Date to String, passed to the `format`\n * prop.\n * @param {Date} d\n * @return {String}\n */\n\n\nfunction defaultFormat(d) {\n  if ((0, _DateUtils.isDate)(d)) {\n    var year = d.getFullYear();\n    var month = '' + (d.getMonth() + 1);\n    var day = '' + d.getDate();\n    return year + '-' + month + '-' + day;\n  }\n\n  return '';\n}\n/**\n * The default function used to parse a String as Date, passed to the `parse`\n * prop.\n * @param {String} str\n * @return {Date}\n */\n\n\nfunction defaultParse(str) {\n  if (typeof str !== 'string') {\n    return undefined;\n  }\n\n  var split = str.split('-');\n\n  if (split.length !== 3) {\n    return undefined;\n  }\n\n  var year = parseInt(split[0], 10);\n  var month = parseInt(split[1], 10) - 1;\n  var day = parseInt(split[2], 10);\n\n  if (isNaN(year) || String(year).length > 4 || isNaN(month) || isNaN(day) || day <= 0 || day > 31 || month < 0 || month >= 12) {\n    return undefined;\n  }\n\n  return new Date(year, month, day, 12, 0, 0, 0); // always set noon to avoid time zone issues\n}\n\nvar DayPickerInput = function (_React$Component) {\n  _inherits(DayPickerInput, _React$Component);\n\n  function DayPickerInput(props) {\n    _classCallCheck(this, DayPickerInput);\n\n    var _this = _possibleConstructorReturn(this, (DayPickerInput.__proto__ || Object.getPrototypeOf(DayPickerInput)).call(this, props));\n\n    _this.input = null;\n    _this.daypicker = null;\n    _this.clickTimeout = null;\n    _this.hideTimeout = null;\n    _this.inputBlurTimeout = null;\n    _this.inputFocusTimeout = null;\n    _this.state = _this.getInitialStateFromProps(props);\n    _this.state.showOverlay = props.showOverlay;\n    _this.hideAfterDayClick = _this.hideAfterDayClick.bind(_this);\n    _this.handleInputClick = _this.handleInputClick.bind(_this);\n    _this.handleInputFocus = _this.handleInputFocus.bind(_this);\n    _this.handleInputBlur = _this.handleInputBlur.bind(_this);\n    _this.handleInputChange = _this.handleInputChange.bind(_this);\n    _this.handleInputKeyDown = _this.handleInputKeyDown.bind(_this);\n    _this.handleInputKeyUp = _this.handleInputKeyUp.bind(_this);\n    _this.handleDayClick = _this.handleDayClick.bind(_this);\n    _this.handleMonthChange = _this.handleMonthChange.bind(_this);\n    _this.handleOverlayFocus = _this.handleOverlayFocus.bind(_this);\n    _this.handleOverlayBlur = _this.handleOverlayBlur.bind(_this);\n    return _this;\n  }\n\n  _createClass(DayPickerInput, [{\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var newState = {}; // Current props\n\n      var _props = this.props,\n          value = _props.value,\n          formatDate = _props.formatDate,\n          format = _props.format,\n          dayPickerProps = _props.dayPickerProps; // Update the input value if `value`, `dayPickerProps.locale` or `format`\n      // props have changed\n\n      if (value !== prevProps.value || dayPickerProps.locale !== prevProps.dayPickerProps.locale || format !== prevProps.format) {\n        if ((0, _DateUtils.isDate)(value)) {\n          newState.value = formatDate(value, format, dayPickerProps.locale);\n        } else {\n          newState.value = value;\n        }\n      } // Update the month if the months from props changed\n\n\n      var prevMonth = prevProps.dayPickerProps.month;\n\n      if (dayPickerProps.month && dayPickerProps.month !== prevMonth && !(0, _DateUtils.isSameMonth)(dayPickerProps.month, prevMonth)) {\n        newState.month = dayPickerProps.month;\n      } // Updated the selected days from props if they changed\n\n\n      if (prevProps.dayPickerProps.selectedDays !== dayPickerProps.selectedDays) {\n        newState.selectedDays = dayPickerProps.selectedDays;\n      }\n\n      if (Object.keys(newState).length > 0) {\n        // eslint-disable-next-line react/no-did-update-set-state\n        this.setState(newState);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      clearTimeout(this.clickTimeout);\n      clearTimeout(this.hideTimeout);\n      clearTimeout(this.inputFocusTimeout);\n      clearTimeout(this.inputBlurTimeout);\n      clearTimeout(this.overlayBlurTimeout);\n    }\n  }, {\n    key: 'getInitialMonthFromProps',\n    value: function getInitialMonthFromProps(props) {\n      var dayPickerProps = props.dayPickerProps,\n          format = props.format;\n      var day = void 0;\n\n      if (props.value) {\n        if ((0, _DateUtils.isDate)(props.value)) {\n          day = props.value;\n        } else {\n          day = props.parseDate(props.value, format, dayPickerProps.locale);\n        }\n      }\n\n      return dayPickerProps.initialMonth || dayPickerProps.month || day || new Date();\n    }\n  }, {\n    key: 'getInitialStateFromProps',\n    value: function getInitialStateFromProps(props) {\n      var dayPickerProps = props.dayPickerProps,\n          formatDate = props.formatDate,\n          format = props.format,\n          typedValue = props.typedValue;\n      var value = props.value;\n\n      if (props.value && (0, _DateUtils.isDate)(props.value)) {\n        value = formatDate(props.value, format, dayPickerProps.locale);\n      }\n\n      return {\n        value: value,\n        typedValue: typedValue,\n        month: this.getInitialMonthFromProps(props),\n        selectedDays: dayPickerProps.selectedDays\n      };\n    }\n  }, {\n    key: 'getInput',\n    value: function getInput() {\n      return this.input;\n    }\n  }, {\n    key: 'getDayPicker',\n    value: function getDayPicker() {\n      return this.daypicker;\n    }\n    /**\n     * Update the component's state and fire the `onDayChange` event passing the\n     * day's modifiers to it.\n     *\n     * @param {Date} day - Will be used for changing the month\n     * @param {String} value - Input field value\n     * @private\n     */\n\n  }, {\n    key: 'updateState',\n    value: function updateState(day, value, callback) {\n      var _this2 = this;\n\n      var _props2 = this.props,\n          dayPickerProps = _props2.dayPickerProps,\n          onDayChange = _props2.onDayChange;\n      this.setState({\n        month: day,\n        value: value,\n        typedValue: ''\n      }, function () {\n        if (callback) {\n          callback();\n        }\n\n        if (!onDayChange) {\n          return;\n        }\n\n        var modifiersObj = _extends({\n          disabled: dayPickerProps.disabledDays,\n          selected: dayPickerProps.selectedDays\n        }, dayPickerProps.modifiers);\n\n        var modifiers = (0, _ModifiersUtils.getModifiersForDay)(day, modifiersObj).reduce(function (obj, modifier) {\n          return _extends({}, obj, _defineProperty({}, modifier, true));\n        }, {});\n        onDayChange(day, modifiers, _this2);\n      });\n    }\n    /**\n     * Show the Day Picker overlay.\n     *\n     * @memberof DayPickerInput\n     */\n\n  }, {\n    key: 'showDayPicker',\n    value: function showDayPicker() {\n      var _this3 = this;\n\n      var _props3 = this.props,\n          parseDate = _props3.parseDate,\n          format = _props3.format,\n          dayPickerProps = _props3.dayPickerProps;\n      var _state = this.state,\n          value = _state.value,\n          showOverlay = _state.showOverlay;\n\n      if (showOverlay) {\n        return;\n      } // Reset the current displayed month when showing the overlay\n\n\n      var month = value ? parseDate(value, format, dayPickerProps.locale) // Use the month in the input field\n      : this.getInitialMonthFromProps(this.props); // Restore the month from the props\n\n      this.setState(function (state) {\n        return {\n          showOverlay: true,\n          month: month || state.month\n        };\n      }, function () {\n        if (_this3.props.onDayPickerShow) _this3.props.onDayPickerShow();\n      });\n    }\n    /**\n     * Hide the Day Picker overlay\n     *\n     * @memberof DayPickerInput\n     */\n\n  }, {\n    key: 'hideDayPicker',\n    value: function hideDayPicker() {\n      var _this4 = this;\n\n      if (this.state.showOverlay === false) {\n        return;\n      }\n\n      this.setState({\n        showOverlay: false\n      }, function () {\n        if (_this4.props.onDayPickerHide) _this4.props.onDayPickerHide();\n      });\n    }\n  }, {\n    key: 'hideAfterDayClick',\n    value: function hideAfterDayClick() {\n      var _this5 = this;\n\n      if (!this.props.hideOnDayClick) {\n        return;\n      }\n\n      this.hideTimeout = setTimeout(function () {\n        _this5.overlayHasFocus = false;\n\n        _this5.hideDayPicker();\n      }, HIDE_TIMEOUT);\n    }\n  }, {\n    key: 'handleInputClick',\n    value: function handleInputClick(e) {\n      this.showDayPicker();\n\n      if (this.props.inputProps.onClick) {\n        e.persist();\n        this.props.inputProps.onClick(e);\n      }\n    }\n  }, {\n    key: 'handleInputFocus',\n    value: function handleInputFocus(e) {\n      var _this6 = this;\n\n      this.showDayPicker(); // Set `overlayHasFocus` after a timeout so the overlay can be hidden when\n      // the input is blurred\n\n      this.inputFocusTimeout = setTimeout(function () {\n        _this6.overlayHasFocus = false;\n      }, 2);\n\n      if (this.props.inputProps.onFocus) {\n        e.persist();\n        this.props.inputProps.onFocus(e);\n      }\n    } // When the input is blurred, the overlay should disappear. However the input\n    // is blurred also when the user interacts with the overlay (e.g. the overlay\n    // get the focus by clicking it). In these cases, the overlay should not be\n    // hidden. There are different approaches to avoid hiding the overlay when\n    // this happens, but the only cross-browser hack we’ve found is to set all\n    // these timeouts in code before changing `overlayHasFocus`.\n\n  }, {\n    key: 'handleInputBlur',\n    value: function handleInputBlur(e) {\n      var _this7 = this;\n\n      this.inputBlurTimeout = setTimeout(function () {\n        if (!_this7.overlayHasFocus) {\n          _this7.hideDayPicker();\n        }\n      }, 1);\n\n      if (this.props.inputProps.onBlur) {\n        e.persist();\n        this.props.inputProps.onBlur(e);\n      }\n    }\n  }, {\n    key: 'handleOverlayFocus',\n    value: function handleOverlayFocus(e) {\n      e.preventDefault();\n      this.overlayHasFocus = true;\n\n      if (!this.props.keepFocus || !this.input || typeof this.input.focus !== 'function') {\n        return;\n      }\n\n      this.input.focus();\n    }\n  }, {\n    key: 'handleOverlayBlur',\n    value: function handleOverlayBlur() {\n      var _this8 = this; // We need to set a timeout otherwise IE11 will hide the overlay when\n      // focusing it\n\n\n      this.overlayBlurTimeout = setTimeout(function () {\n        _this8.overlayHasFocus = false;\n      }, 3);\n    }\n  }, {\n    key: 'handleInputChange',\n    value: function handleInputChange(e) {\n      var _props4 = this.props,\n          dayPickerProps = _props4.dayPickerProps,\n          format = _props4.format,\n          inputProps = _props4.inputProps,\n          onDayChange = _props4.onDayChange,\n          parseDate = _props4.parseDate;\n\n      if (inputProps.onChange) {\n        e.persist();\n        inputProps.onChange(e);\n      }\n\n      var value = e.target.value;\n\n      if (value.trim() === '') {\n        this.setState({\n          value: value,\n          typedValue: ''\n        });\n        if (onDayChange) onDayChange(undefined, {}, this);\n        return;\n      }\n\n      var day = parseDate(value, format, dayPickerProps.locale);\n\n      if (!day) {\n        // Day is invalid: we save the value in the typedValue state\n        this.setState({\n          value: value,\n          typedValue: value\n        });\n        if (onDayChange) onDayChange(undefined, {}, this);\n        return;\n      }\n\n      this.updateState(day, value);\n    }\n  }, {\n    key: 'handleInputKeyDown',\n    value: function handleInputKeyDown(e) {\n      if (e.keyCode === _keys.TAB) {\n        this.hideDayPicker();\n      } else {\n        this.showDayPicker();\n      }\n\n      if (this.props.inputProps.onKeyDown) {\n        e.persist();\n        this.props.inputProps.onKeyDown(e);\n      }\n    }\n  }, {\n    key: 'handleInputKeyUp',\n    value: function handleInputKeyUp(e) {\n      if (e.keyCode === _keys.ESC) {\n        this.hideDayPicker();\n      } else {\n        this.showDayPicker();\n      }\n\n      if (this.props.inputProps.onKeyUp) {\n        e.persist();\n        this.props.inputProps.onKeyUp(e);\n      }\n    }\n  }, {\n    key: 'handleMonthChange',\n    value: function handleMonthChange(month) {\n      var _this9 = this;\n\n      this.setState({\n        month: month\n      }, function () {\n        if (_this9.props.dayPickerProps && _this9.props.dayPickerProps.onMonthChange) {\n          _this9.props.dayPickerProps.onMonthChange(month);\n        }\n      });\n    }\n  }, {\n    key: 'handleDayClick',\n    value: function handleDayClick(day, modifiers, e) {\n      var _this10 = this;\n\n      var _props5 = this.props,\n          clickUnselectsDay = _props5.clickUnselectsDay,\n          dayPickerProps = _props5.dayPickerProps,\n          onDayChange = _props5.onDayChange,\n          formatDate = _props5.formatDate,\n          format = _props5.format;\n\n      if (dayPickerProps.onDayClick) {\n        dayPickerProps.onDayClick(day, modifiers, e);\n      } // Do nothing if the day is disabled\n\n\n      if (modifiers.disabled || dayPickerProps && dayPickerProps.classNames && modifiers[dayPickerProps.classNames.disabled]) {\n        return;\n      } // If the clicked day is already selected, remove the clicked day\n      // from the selected days and empty the field value\n\n\n      if (modifiers.selected && clickUnselectsDay) {\n        var selectedDays = this.state.selectedDays;\n\n        if (Array.isArray(selectedDays)) {\n          selectedDays = selectedDays.slice(0);\n          var selectedDayIdx = selectedDays.indexOf(day);\n          selectedDays.splice(selectedDayIdx, 1);\n        } else if (selectedDays) {\n          selectedDays = null;\n        }\n\n        this.setState({\n          value: '',\n          typedValue: '',\n          selectedDays: selectedDays\n        }, this.hideAfterDayClick);\n\n        if (onDayChange) {\n          onDayChange(undefined, modifiers, this);\n        }\n\n        return;\n      }\n\n      var value = formatDate(day, format, dayPickerProps.locale);\n      this.setState({\n        value: value,\n        typedValue: '',\n        month: day\n      }, function () {\n        if (onDayChange) {\n          onDayChange(day, modifiers, _this10);\n        }\n\n        _this10.hideAfterDayClick();\n      });\n    }\n  }, {\n    key: 'renderOverlay',\n    value: function renderOverlay() {\n      var _this11 = this;\n\n      var _props6 = this.props,\n          classNames = _props6.classNames,\n          dayPickerProps = _props6.dayPickerProps,\n          parseDate = _props6.parseDate,\n          formatDate = _props6.formatDate,\n          format = _props6.format;\n      var _state2 = this.state,\n          selectedDays = _state2.selectedDays,\n          value = _state2.value;\n      var selectedDay = void 0;\n\n      if (!selectedDays && value) {\n        var day = parseDate(value, format, dayPickerProps.locale);\n\n        if (day) {\n          selectedDay = day;\n        }\n      } else if (selectedDays) {\n        selectedDay = selectedDays;\n      }\n\n      var onTodayButtonClick = void 0;\n\n      if (dayPickerProps.todayButton) {\n        // Set the current day when clicking the today button\n        onTodayButtonClick = function onTodayButtonClick() {\n          return _this11.updateState(new Date(), formatDate(new Date(), format, dayPickerProps.locale), _this11.hideAfterDayClick);\n        };\n      }\n\n      var Overlay = this.props.overlayComponent;\n      return _react2.default.createElement(Overlay, {\n        classNames: classNames,\n        month: this.state.month,\n        selectedDay: selectedDay,\n        input: this.input,\n        tabIndex: 0 // tabIndex is necessary to catch focus/blur events on Safari\n        ,\n        onFocus: this.handleOverlayFocus,\n        onBlur: this.handleOverlayBlur\n      }, _react2.default.createElement(_DayPicker2.default, _extends({\n        ref: function ref(el) {\n          return _this11.daypicker = el;\n        },\n        onTodayButtonClick: onTodayButtonClick\n      }, dayPickerProps, {\n        month: this.state.month,\n        selectedDays: selectedDay,\n        onDayClick: this.handleDayClick,\n        onMonthChange: this.handleMonthChange\n      })));\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this12 = this;\n\n      var Input = this.props.component;\n      var inputProps = this.props.inputProps;\n      return _react2.default.createElement('div', {\n        className: this.props.classNames.container,\n        style: this.props.style\n      }, _react2.default.createElement(Input, _extends({\n        ref: function ref(el) {\n          return _this12.input = el;\n        },\n        placeholder: this.props.placeholder\n      }, inputProps, {\n        value: this.state.value || this.state.typedValue,\n        onChange: this.handleInputChange,\n        onFocus: this.handleInputFocus,\n        onBlur: this.handleInputBlur,\n        onKeyDown: this.handleInputKeyDown,\n        onKeyUp: this.handleInputKeyUp,\n        onClick: !inputProps.disabled ? this.handleInputClick : undefined\n      })), this.state.showOverlay && this.renderOverlay());\n    }\n  }]);\n\n  return DayPickerInput;\n}(_react2.default.Component);\n\nDayPickerInput.defaultProps = {\n  dayPickerProps: {},\n  value: '',\n  typedValue: '',\n  placeholder: 'YYYY-M-D',\n  format: 'L',\n  formatDate: defaultFormat,\n  parseDate: defaultParse,\n  showOverlay: false,\n  hideOnDayClick: true,\n  clickUnselectsDay: false,\n  keepFocus: true,\n  component: 'input',\n  inputProps: {},\n  overlayComponent: OverlayComponent,\n  classNames: {\n    container: 'DayPickerInput',\n    overlayWrapper: 'DayPickerInput-OverlayWrapper',\n    overlay: 'DayPickerInput-Overlay'\n  }\n};\nexports.default = DayPickerInput;","map":{"version":3,"mappings":"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","names":["OverlayComponent","defaultFormat","defaultParse","HIDE_TIMEOUT","input","selectedDay","month","children","classNames","props","_react2","className","overlayWrapper","overlay","d","year","getFullYear","getMonth","day","getDate","str","undefined","split","length","parseInt","isNaN","String","Date","DayPickerInput","_classCallCheck","_this","daypicker","clickTimeout","hideTimeout","inputBlurTimeout","inputFocusTimeout","state","getInitialStateFromProps","showOverlay","hideAfterDayClick","bind","handleInputClick","handleInputFocus","handleInputBlur","handleInputChange","handleInputKeyDown","handleInputKeyUp","handleDayClick","handleMonthChange","handleOverlayFocus","handleOverlayBlur","prevProps","newState","value","formatDate","format","dayPickerProps","locale","prevMonth","selectedDays","Object","keys","setState","clearTimeout","overlayBlurTimeout","parseDate","initialMonth","typedValue","getInitialMonthFromProps","callback","onDayChange","modifiersObj","disabled","disabledDays","selected","modifiers","reduce","obj","modifier","_this2","_this3","onDayPickerShow","_this4","onDayPickerHide","hideOnDayClick","setTimeout","_this5","overlayHasFocus","hideDayPicker","e","showDayPicker","inputProps","onClick","persist","_this6","onFocus","_this7","onBlur","preventDefault","keepFocus","focus","_this8","onChange","target","trim","updateState","keyCode","TAB","onKeyDown","ESC","onKeyUp","_this9","onMonthChange","clickUnselectsDay","onDayClick","Array","isArray","slice","selectedDayIdx","indexOf","splice","_this10","onTodayButtonClick","todayButton","_this11","Overlay","overlayComponent","tabIndex","_DayPicker2","ref","el","Input","component","container","style","_this12","placeholder","renderOverlay","React","Component","defaultProps"],"sources":["/home/mike/proj/frontend/ui/node_modules/react-day-picker/src/DayPickerInput.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport DayPicker from './DayPicker';\nimport { isSameMonth, isDate } from './DateUtils';\nimport { getModifiersForDay } from './ModifiersUtils';\nimport { ESC, TAB } from './keys';\n\n// When clicking on a day cell, overlay will be hidden after this timeout\nexport const HIDE_TIMEOUT = 100;\n\n/**\n * The default component used as Overlay.\n *\n * @param {Object} props\n */\nexport function OverlayComponent({\n  input,\n  selectedDay,\n  month,\n  children,\n  classNames,\n  ...props\n}) {\n  return (\n    <div className={classNames.overlayWrapper} {...props}>\n      <div className={classNames.overlay}>{children}</div>\n    </div>\n  );\n}\n\nOverlayComponent.propTypes = {\n  input: PropTypes.any,\n  selectedDay: PropTypes.any,\n  month: PropTypes.instanceOf(Date),\n  children: PropTypes.node,\n  classNames: PropTypes.object,\n};\n\n/**\n * The default function used to format a Date to String, passed to the `format`\n * prop.\n * @param {Date} d\n * @return {String}\n */\nexport function defaultFormat(d) {\n  if (isDate(d)) {\n    const year = d.getFullYear();\n    const month = `${d.getMonth() + 1}`;\n    const day = `${d.getDate()}`;\n    return `${year}-${month}-${day}`;\n  }\n  return '';\n}\n\n/**\n * The default function used to parse a String as Date, passed to the `parse`\n * prop.\n * @param {String} str\n * @return {Date}\n */\nexport function defaultParse(str) {\n  if (typeof str !== 'string') {\n    return undefined;\n  }\n  const split = str.split('-');\n  if (split.length !== 3) {\n    return undefined;\n  }\n  const year = parseInt(split[0], 10);\n  const month = parseInt(split[1], 10) - 1;\n  const day = parseInt(split[2], 10);\n  if (\n    isNaN(year) ||\n    String(year).length > 4 ||\n    isNaN(month) ||\n    isNaN(day) ||\n    day <= 0 ||\n    day > 31 ||\n    month < 0 ||\n    month >= 12\n  ) {\n    return undefined;\n  }\n\n  return new Date(year, month, day, 12, 0, 0, 0); // always set noon to avoid time zone issues\n}\n\nexport default class DayPickerInput extends React.Component {\n  input = null;\n\n  daypicker = null;\n\n  clickTimeout = null;\n\n  hideTimeout = null;\n\n  inputBlurTimeout = null;\n\n  inputFocusTimeout = null;\n\n  static propTypes = {\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),\n    inputProps: PropTypes.object,\n    placeholder: PropTypes.string,\n\n    format: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.arrayOf(PropTypes.string),\n    ]),\n\n    formatDate: PropTypes.func,\n    parseDate: PropTypes.func,\n    typedValue: PropTypes.string,\n\n    showOverlay: PropTypes.bool,\n    dayPickerProps: PropTypes.object,\n    hideOnDayClick: PropTypes.bool,\n    clickUnselectsDay: PropTypes.bool,\n    keepFocus: PropTypes.bool,\n    component: PropTypes.any,\n    overlayComponent: PropTypes.any,\n\n    style: PropTypes.object,\n    classNames: PropTypes.shape({\n      container: PropTypes.string,\n      overlayWrapper: PropTypes.string,\n      overlay: PropTypes.string.isRequired,\n    }),\n\n    onDayChange: PropTypes.func,\n    onDayPickerHide: PropTypes.func,\n    onDayPickerShow: PropTypes.func,\n    onChange: PropTypes.func,\n    onClick: PropTypes.func,\n    onFocus: PropTypes.func,\n    onBlur: PropTypes.func,\n    onKeyUp: PropTypes.func,\n  };\n\n  static defaultProps = {\n    dayPickerProps: {},\n    value: '',\n    typedValue: '',\n    placeholder: 'YYYY-M-D',\n    format: 'L',\n    formatDate: defaultFormat,\n    parseDate: defaultParse,\n    showOverlay: false,\n    hideOnDayClick: true,\n    clickUnselectsDay: false,\n    keepFocus: true,\n    component: 'input',\n    inputProps: {},\n    overlayComponent: OverlayComponent,\n    classNames: {\n      container: 'DayPickerInput',\n      overlayWrapper: 'DayPickerInput-OverlayWrapper',\n      overlay: 'DayPickerInput-Overlay',\n    },\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = this.getInitialStateFromProps(props);\n    this.state.showOverlay = props.showOverlay;\n\n    this.hideAfterDayClick = this.hideAfterDayClick.bind(this);\n    this.handleInputClick = this.handleInputClick.bind(this);\n    this.handleInputFocus = this.handleInputFocus.bind(this);\n    this.handleInputBlur = this.handleInputBlur.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleInputKeyDown = this.handleInputKeyDown.bind(this);\n    this.handleInputKeyUp = this.handleInputKeyUp.bind(this);\n    this.handleDayClick = this.handleDayClick.bind(this);\n    this.handleMonthChange = this.handleMonthChange.bind(this);\n    this.handleOverlayFocus = this.handleOverlayFocus.bind(this);\n    this.handleOverlayBlur = this.handleOverlayBlur.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    const newState = {};\n\n    // Current props\n    const { value, formatDate, format, dayPickerProps } = this.props;\n\n    // Update the input value if `value`, `dayPickerProps.locale` or `format`\n    // props have changed\n    if (\n      value !== prevProps.value ||\n      dayPickerProps.locale !== prevProps.dayPickerProps.locale ||\n      format !== prevProps.format\n    ) {\n      if (isDate(value)) {\n        newState.value = formatDate(value, format, dayPickerProps.locale);\n      } else {\n        newState.value = value;\n      }\n    }\n\n    // Update the month if the months from props changed\n    const prevMonth = prevProps.dayPickerProps.month;\n    if (\n      dayPickerProps.month &&\n      dayPickerProps.month !== prevMonth &&\n      !isSameMonth(dayPickerProps.month, prevMonth)\n    ) {\n      newState.month = dayPickerProps.month;\n    }\n\n    // Updated the selected days from props if they changed\n    if (prevProps.dayPickerProps.selectedDays !== dayPickerProps.selectedDays) {\n      newState.selectedDays = dayPickerProps.selectedDays;\n    }\n\n    if (Object.keys(newState).length > 0) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState(newState);\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.clickTimeout);\n    clearTimeout(this.hideTimeout);\n    clearTimeout(this.inputFocusTimeout);\n    clearTimeout(this.inputBlurTimeout);\n    clearTimeout(this.overlayBlurTimeout);\n  }\n\n  getInitialMonthFromProps(props) {\n    const { dayPickerProps, format } = props;\n    let day;\n    if (props.value) {\n      if (isDate(props.value)) {\n        day = props.value;\n      } else {\n        day = props.parseDate(props.value, format, dayPickerProps.locale);\n      }\n    }\n    return (\n      dayPickerProps.initialMonth || dayPickerProps.month || day || new Date()\n    );\n  }\n\n  getInitialStateFromProps(props) {\n    const { dayPickerProps, formatDate, format, typedValue } = props;\n    let { value } = props;\n    if (props.value && isDate(props.value)) {\n      value = formatDate(props.value, format, dayPickerProps.locale);\n    }\n\n    return {\n      value,\n      typedValue,\n      month: this.getInitialMonthFromProps(props),\n      selectedDays: dayPickerProps.selectedDays,\n    };\n  }\n\n  getInput() {\n    return this.input;\n  }\n\n  getDayPicker() {\n    return this.daypicker;\n  }\n\n  /**\n   * Update the component's state and fire the `onDayChange` event passing the\n   * day's modifiers to it.\n   *\n   * @param {Date} day - Will be used for changing the month\n   * @param {String} value - Input field value\n   * @private\n   */\n  updateState(day, value, callback) {\n    const { dayPickerProps, onDayChange } = this.props;\n    this.setState({ month: day, value, typedValue: '' }, () => {\n      if (callback) {\n        callback();\n      }\n      if (!onDayChange) {\n        return;\n      }\n      const modifiersObj = {\n        disabled: dayPickerProps.disabledDays,\n        selected: dayPickerProps.selectedDays,\n        ...dayPickerProps.modifiers,\n      };\n      const modifiers = getModifiersForDay(day, modifiersObj).reduce(\n        (obj, modifier) => ({\n          ...obj,\n          [modifier]: true,\n        }),\n        {}\n      );\n      onDayChange(day, modifiers, this);\n    });\n  }\n\n  /**\n   * Show the Day Picker overlay.\n   *\n   * @memberof DayPickerInput\n   */\n  showDayPicker() {\n    const { parseDate, format, dayPickerProps } = this.props;\n    const { value, showOverlay } = this.state;\n    if (showOverlay) {\n      return;\n    }\n    // Reset the current displayed month when showing the overlay\n    const month = value\n      ? parseDate(value, format, dayPickerProps.locale) // Use the month in the input field\n      : this.getInitialMonthFromProps(this.props); // Restore the month from the props\n    this.setState(\n      state => ({\n        showOverlay: true,\n        month: month || state.month,\n      }),\n      () => {\n        if (this.props.onDayPickerShow) this.props.onDayPickerShow();\n      }\n    );\n  }\n\n  /**\n   * Hide the Day Picker overlay\n   *\n   * @memberof DayPickerInput\n   */\n  hideDayPicker() {\n    if (this.state.showOverlay === false) {\n      return;\n    }\n    this.setState({ showOverlay: false }, () => {\n      if (this.props.onDayPickerHide) this.props.onDayPickerHide();\n    });\n  }\n\n  hideAfterDayClick() {\n    if (!this.props.hideOnDayClick) {\n      return;\n    }\n    this.hideTimeout = setTimeout(() => {\n      this.overlayHasFocus = false;\n      this.hideDayPicker();\n    }, HIDE_TIMEOUT);\n  }\n\n  handleInputClick(e) {\n    this.showDayPicker();\n    if (this.props.inputProps.onClick) {\n      e.persist();\n      this.props.inputProps.onClick(e);\n    }\n  }\n\n  handleInputFocus(e) {\n    this.showDayPicker();\n    // Set `overlayHasFocus` after a timeout so the overlay can be hidden when\n    // the input is blurred\n    this.inputFocusTimeout = setTimeout(() => {\n      this.overlayHasFocus = false;\n    }, 2);\n    if (this.props.inputProps.onFocus) {\n      e.persist();\n      this.props.inputProps.onFocus(e);\n    }\n  }\n\n  // When the input is blurred, the overlay should disappear. However the input\n  // is blurred also when the user interacts with the overlay (e.g. the overlay\n  // get the focus by clicking it). In these cases, the overlay should not be\n  // hidden. There are different approaches to avoid hiding the overlay when\n  // this happens, but the only cross-browser hack we’ve found is to set all\n  // these timeouts in code before changing `overlayHasFocus`.\n  handleInputBlur(e) {\n    this.inputBlurTimeout = setTimeout(() => {\n      if (!this.overlayHasFocus) {\n        this.hideDayPicker();\n      }\n    }, 1);\n    if (this.props.inputProps.onBlur) {\n      e.persist();\n      this.props.inputProps.onBlur(e);\n    }\n  }\n\n  handleOverlayFocus(e) {\n    e.preventDefault();\n    this.overlayHasFocus = true;\n    if (\n      !this.props.keepFocus ||\n      !this.input ||\n      typeof this.input.focus !== 'function'\n    ) {\n      return;\n    }\n    this.input.focus();\n  }\n\n  handleOverlayBlur() {\n    // We need to set a timeout otherwise IE11 will hide the overlay when\n    // focusing it\n    this.overlayBlurTimeout = setTimeout(() => {\n      this.overlayHasFocus = false;\n    }, 3);\n  }\n\n  handleInputChange(e) {\n    const {\n      dayPickerProps,\n      format,\n      inputProps,\n      onDayChange,\n      parseDate,\n    } = this.props;\n    if (inputProps.onChange) {\n      e.persist();\n      inputProps.onChange(e);\n    }\n    const { value } = e.target;\n    if (value.trim() === '') {\n      this.setState({ value, typedValue: '' });\n      if (onDayChange) onDayChange(undefined, {}, this);\n      return;\n    }\n    const day = parseDate(value, format, dayPickerProps.locale);\n    if (!day) {\n      // Day is invalid: we save the value in the typedValue state\n      this.setState({ value, typedValue: value });\n      if (onDayChange) onDayChange(undefined, {}, this);\n      return;\n    }\n    this.updateState(day, value);\n  }\n\n  handleInputKeyDown(e) {\n    if (e.keyCode === TAB) {\n      this.hideDayPicker();\n    } else {\n      this.showDayPicker();\n    }\n    if (this.props.inputProps.onKeyDown) {\n      e.persist();\n      this.props.inputProps.onKeyDown(e);\n    }\n  }\n\n  handleInputKeyUp(e) {\n    if (e.keyCode === ESC) {\n      this.hideDayPicker();\n    } else {\n      this.showDayPicker();\n    }\n    if (this.props.inputProps.onKeyUp) {\n      e.persist();\n      this.props.inputProps.onKeyUp(e);\n    }\n  }\n\n  handleMonthChange(month) {\n    this.setState({ month }, () => {\n      if (\n        this.props.dayPickerProps &&\n        this.props.dayPickerProps.onMonthChange\n      ) {\n        this.props.dayPickerProps.onMonthChange(month);\n      }\n    });\n  }\n\n  handleDayClick(day, modifiers, e) {\n    const {\n      clickUnselectsDay,\n      dayPickerProps,\n      onDayChange,\n      formatDate,\n      format,\n    } = this.props;\n    if (dayPickerProps.onDayClick) {\n      dayPickerProps.onDayClick(day, modifiers, e);\n    }\n\n    // Do nothing if the day is disabled\n    if (\n      modifiers.disabled ||\n      (dayPickerProps &&\n        dayPickerProps.classNames &&\n        modifiers[dayPickerProps.classNames.disabled])\n    ) {\n      return;\n    }\n\n    // If the clicked day is already selected, remove the clicked day\n    // from the selected days and empty the field value\n    if (modifiers.selected && clickUnselectsDay) {\n      let { selectedDays } = this.state;\n      if (Array.isArray(selectedDays)) {\n        selectedDays = selectedDays.slice(0);\n        const selectedDayIdx = selectedDays.indexOf(day);\n        selectedDays.splice(selectedDayIdx, 1);\n      } else if (selectedDays) {\n        selectedDays = null;\n      }\n\n      this.setState(\n        { value: '', typedValue: '', selectedDays },\n        this.hideAfterDayClick\n      );\n\n      if (onDayChange) {\n        onDayChange(undefined, modifiers, this);\n      }\n      return;\n    }\n\n    const value = formatDate(day, format, dayPickerProps.locale);\n    this.setState({ value, typedValue: '', month: day }, () => {\n      if (onDayChange) {\n        onDayChange(day, modifiers, this);\n      }\n      this.hideAfterDayClick();\n    });\n  }\n\n  renderOverlay() {\n    const {\n      classNames,\n      dayPickerProps,\n      parseDate,\n      formatDate,\n      format,\n    } = this.props;\n    const { selectedDays, value } = this.state;\n    let selectedDay;\n    if (!selectedDays && value) {\n      const day = parseDate(value, format, dayPickerProps.locale);\n      if (day) {\n        selectedDay = day;\n      }\n    } else if (selectedDays) {\n      selectedDay = selectedDays;\n    }\n    let onTodayButtonClick;\n    if (dayPickerProps.todayButton) {\n      // Set the current day when clicking the today button\n      onTodayButtonClick = () =>\n        this.updateState(\n          new Date(),\n          formatDate(new Date(), format, dayPickerProps.locale),\n          this.hideAfterDayClick\n        );\n    }\n    const Overlay = this.props.overlayComponent;\n    return (\n      <Overlay\n        classNames={classNames}\n        month={this.state.month}\n        selectedDay={selectedDay}\n        input={this.input}\n        tabIndex={0} // tabIndex is necessary to catch focus/blur events on Safari\n        onFocus={this.handleOverlayFocus}\n        onBlur={this.handleOverlayBlur}\n      >\n        <DayPicker\n          ref={el => (this.daypicker = el)}\n          onTodayButtonClick={onTodayButtonClick}\n          {...dayPickerProps}\n          month={this.state.month}\n          selectedDays={selectedDay}\n          onDayClick={this.handleDayClick}\n          onMonthChange={this.handleMonthChange}\n        />\n      </Overlay>\n    );\n  }\n\n  render() {\n    const Input = this.props.component;\n    const { inputProps } = this.props;\n    return (\n      <div className={this.props.classNames.container} style={this.props.style}>\n        <Input\n          ref={el => (this.input = el)}\n          placeholder={this.props.placeholder}\n          {...inputProps}\n          value={this.state.value || this.state.typedValue}\n          onChange={this.handleInputChange}\n          onFocus={this.handleInputFocus}\n          onBlur={this.handleInputBlur}\n          onKeyDown={this.handleInputKeyDown}\n          onKeyUp={this.handleInputKeyUp}\n          onClick={!inputProps.disabled ? this.handleInputClick : undefined}\n        />\n        {this.state.showOverlay && this.renderOverlay()}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}