{"ast":null,"code":"import addMinutes from \"../addMinutes/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport startOfMinute from \"../startOfMinute/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name eachMinuteOfInterval\n * @category Interval Helpers\n * @summary Return the array of minutes within the specified time interval.\n *\n * @description\n * Returns the array of minutes within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.step=1] - the step to increment by. The starts of minutes from the hour of the interval start to the hour of the interval end\n * @throws {TypeError} 1 argument requie value should be more than 1.\n * @returns {Date[]} the array withred\n * @throws {RangeError} `options.step` must be a number equal or greater than 1\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each minute between 14 October 2020, 13:00 and 14 October 2020, 13:03\n * const result = eachMinuteOfInterval({\n *   start: new Date(2014, 9, 14, 13),\n *   end: new Date(2014, 9, 14, 13, 3)\n * })\n * //=> [\n * //   Wed Oct 14 2014 13:00:00,\n * //   Wed Oct 14 2014 13:01:00,\n * //   Wed Oct 14 2014 13:02:00,\n * //   Wed Oct 14 2014 13:03:00\n * // ]\n */\n\nexport default function eachMinuteOfInterval(interval, options) {\n  requiredArgs(1, arguments);\n  var startDate = startOfMinute(toDate(interval.start));\n  var endDate = toDate(interval.end);\n  var startTime = startDate.getTime();\n  var endTime = endDate.getTime();\n\n  if (startTime >= endTime) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  var step = options && 'step' in options ? Number(options.step) : 1;\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number equal or greater than 1');\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate = addMinutes(currentDate, step);\n  }\n\n  return dates;\n}","map":{"version":3,"sources":["/home/mike/proj/frontend/ui/node_modules/date-fns/esm/eachMinuteOfInterval/index.js"],"names":["addMinutes","toDate","startOfMinute","requiredArgs","eachMinuteOfInterval","interval","options","arguments","startDate","start","endDate","end","startTime","getTime","endTime","RangeError","dates","currentDate","step","Number","isNaN","push"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,wBAAvB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,aAAP,MAA0B,2BAA1B;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,oBAAT,CAA8BC,QAA9B,EAAwCC,OAAxC,EAAiD;AAC9DH,EAAAA,YAAY,CAAC,CAAD,EAAII,SAAJ,CAAZ;AACA,MAAIC,SAAS,GAAGN,aAAa,CAACD,MAAM,CAACI,QAAQ,CAACI,KAAV,CAAP,CAA7B;AACA,MAAIC,OAAO,GAAGT,MAAM,CAACI,QAAQ,CAACM,GAAV,CAApB;AACA,MAAIC,SAAS,GAAGJ,SAAS,CAACK,OAAV,EAAhB;AACA,MAAIC,OAAO,GAAGJ,OAAO,CAACG,OAAR,EAAd;;AAEA,MAAID,SAAS,IAAIE,OAAjB,EAA0B;AACxB,UAAM,IAAIC,UAAJ,CAAe,kBAAf,CAAN;AACD;;AAED,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,WAAW,GAAGT,SAAlB;AACA,MAAIU,IAAI,GAAGZ,OAAO,IAAI,UAAUA,OAArB,GAA+Ba,MAAM,CAACb,OAAO,CAACY,IAAT,CAArC,GAAsD,CAAjE;AACA,MAAIA,IAAI,GAAG,CAAP,IAAYE,KAAK,CAACF,IAAD,CAArB,EAA6B,MAAM,IAAIH,UAAJ,CAAe,yDAAf,CAAN;;AAE7B,SAAOE,WAAW,CAACJ,OAAZ,MAAyBC,OAAhC,EAAyC;AACvCE,IAAAA,KAAK,CAACK,IAAN,CAAWpB,MAAM,CAACgB,WAAD,CAAjB;AACAA,IAAAA,WAAW,GAAGjB,UAAU,CAACiB,WAAD,EAAcC,IAAd,CAAxB;AACD;;AAED,SAAOF,KAAP;AACD","sourcesContent":["import addMinutes from \"../addMinutes/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport startOfMinute from \"../startOfMinute/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name eachMinuteOfInterval\n * @category Interval Helpers\n * @summary Return the array of minutes within the specified time interval.\n *\n * @description\n * Returns the array of minutes within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.step=1] - the step to increment by. The starts of minutes from the hour of the interval start to the hour of the interval end\n * @throws {TypeError} 1 argument requie value should be more than 1.\n * @returns {Date[]} the array withred\n * @throws {RangeError} `options.step` must be a number equal or greater than 1\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each minute between 14 October 2020, 13:00 and 14 October 2020, 13:03\n * const result = eachMinuteOfInterval({\n *   start: new Date(2014, 9, 14, 13),\n *   end: new Date(2014, 9, 14, 13, 3)\n * })\n * //=> [\n * //   Wed Oct 14 2014 13:00:00,\n * //   Wed Oct 14 2014 13:01:00,\n * //   Wed Oct 14 2014 13:02:00,\n * //   Wed Oct 14 2014 13:03:00\n * // ]\n */\nexport default function eachMinuteOfInterval(interval, options) {\n  requiredArgs(1, arguments);\n  var startDate = startOfMinute(toDate(interval.start));\n  var endDate = toDate(interval.end);\n  var startTime = startDate.getTime();\n  var endTime = endDate.getTime();\n\n  if (startTime >= endTime) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  var step = options && 'step' in options ? Number(options.step) : 1;\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number equal or greater than 1');\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate = addMinutes(currentDate, step);\n  }\n\n  return dates;\n}"]},"metadata":{},"sourceType":"module"}