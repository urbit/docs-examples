{"ast":null,"code":"const baseLookups = require('../data/baseLookups.js');\n\nconst {\n  latn,\n  other\n} = require('../data/templates.js');\n\nconst {\n  buildDigits\n} = require('../data/numberingSystems.js');\n\nconst defaultLocale = require('../data/defaultLocale.js');\n\nconst units = require('../data/units.js'); // keep track of singletons by locale name\n\n\nconst cache = {};\n\nclass LocaleHelper {\n  /**\n   * Get a singleton instance with the given locale\n   * @param {String} locale such as en, en-US, es, fr-FR, etc.\n   * @returns {LocaleHelper}\n   */\n  static factory() {\n    let locale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultLocale;\n\n    if (!cache[locale.toLowerCase()]) {\n      cache[locale.toLowerCase()] = new LocaleHelper(locale);\n    }\n\n    return cache[locale.toLowerCase()];\n  }\n  /**\n   * Create a new instance with the given locale\n   * @param {String} locale such as en, en-US, es, fr-FR, etc.\n   */\n\n\n  constructor() {\n    let locale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultLocale;\n\n    /**\n     * The locale string\n     * @type {String}\n     */\n    this.locale = locale;\n    /**\n     * Lookups for zone, year, meridiem, month, dayname, digit\n     * @type {Object} lookups\n     */\n\n    this.lookups = { ...baseLookups\n    };\n    /**\n     * Template variables including MONTHNAME, MONTH, ZONE, etc.\n     * @type {Object} vars\n     */\n\n    this.vars = { ...latn\n    };\n    const fmt = new Intl.NumberFormat(this.locale);\n    /**\n     * The numbering system to use (latn=standard arabic digits)\n     * @type {String} numberingSystem\n     */\n\n    this.numberingSystem = fmt.resolvedOptions().numberingSystem;\n    this.build(); // console.log({\n    // \tnumberingSystem: this.numberingSystem,\n    // \tmonth: this.lookups.month,\n    // \tdayname: this.lookups.dayname,\n    // \tMONTHNAME: this.vars.MONTHNAME,\n    // \tDAYNAME: this.vars.DAYNAME,\n    // });\n  }\n  /**\n   * Cast a string to an integer, minding numbering system\n   * @param {String|Number} digitString  Such as \"2020\" or \"二〇二〇\"\n   * @returns {Number}\n   */\n\n\n  toInt(digitString) {\n    if (typeof digitString === 'number') {\n      return digitString;\n    }\n\n    if (this.numberingSystem === 'latn') {\n      return parseInt(digitString, 10);\n    }\n\n    let latn = '';\n\n    for (let i = 0; i < digitString.length; i++) {\n      latn += String(this.lookups.digit[digitString[i]]);\n    }\n\n    return parseInt(latn, 10);\n  }\n  /**\n   * Build lookups for digits, month names, day names, and meridiems based on the locale\n   */\n\n\n  build() {\n    if (this.numberingSystem !== 'latn') {\n      this.buildNumbers();\n    }\n\n    if (!/^en/i.test(this.locale)) {\n      this.buildMonthNames();\n      this.buildDaynames();\n      this.buildMeridiems();\n    }\n  }\n  /**\n   * Build lookups for digits\n   */\n\n\n  buildNumbers() {\n    const nsName = this.numberingSystem;\n    const {\n      group,\n      lookup\n    } = buildDigits(nsName);\n    this.lookups.digit = lookup;\n\n    for (const name in other) {\n      /* istanbul ignore next */\n      if (!other.hasOwnProperty(name)) {\n        continue;\n      }\n\n      this.vars[name] = other[name].replace(/\\*/g, group);\n    }\n  }\n  /**\n   * Build lookup for month names\n   */\n\n\n  buildMonthNames() {\n    const vars = {};\n    const lookup = {};\n\n    if (/^fi/i.test(this.locale)) {\n      const months = 'tammi|helmi|maalis|huhti|touko|kesä|heinä|elo|syys|loka|marras|joulu';\n      months.split('|').forEach((month, idx) => {\n        ['', 'k', 'kuu', 'kuuta'].forEach((suffix, i) => {\n          const maybePeriod = i < 2 ? '\\\\.?' : '';\n          vars[month + suffix + maybePeriod] = true;\n          lookup[month + suffix] = idx + 1;\n        });\n      });\n    } else {\n      const dates = [];\n\n      const findMonth = item => item.type === 'month';\n\n      for (let monthIdx = 0; monthIdx < 12; monthIdx++) {\n        dates.push(new Date(2017, monthIdx, 1));\n      }\n\n      const dateStyles = ['full', 'long', 'medium'];\n\n      for (const dateStyle of dateStyles) {\n        const format = Intl.DateTimeFormat(this.locale, {\n          dateStyle\n        });\n\n        for (let monthIdx = 0; monthIdx < 12; monthIdx++) {\n          const parts = format.formatToParts(dates[monthIdx]);\n          let text = parts.find(findMonth).value.toLowerCase();\n\n          if (/^ko/i.test(this.locale)) {\n            // Korean word for month is sometimes used\n            text += '월';\n          }\n\n          if (dateStyle === 'medium') {\n            // some languages (including arabic and chinese) don't have a 'medium' size\n            if (/^ar|zh/i.test(this.locale)) {\n              return;\n            }\n\n            text = text.replace(/\\.$/, '');\n            vars[`${text}\\\\.?`] = true;\n          } else {\n            vars[text] = true;\n          }\n\n          lookup[text] = monthIdx + 1;\n        }\n      }\n\n      const format = Intl.DateTimeFormat(this.locale, {\n        month: 'short'\n      });\n\n      for (let monthIdx = 0; monthIdx < 12; monthIdx++) {\n        const parts = format.formatToParts(dates[monthIdx]);\n        let text = parts.find(findMonth).value.toLowerCase();\n        text = text.replace(/\\.$/, '');\n        vars[`${text}\\\\.?`] = true;\n        lookup[text] = monthIdx + 1;\n      }\n    }\n\n    this.vars.MONTHNAME = Object.keys(vars).join('|');\n    this.lookups.month = lookup;\n  }\n  /**\n   * Build lookup for day name\n   */\n\n\n  buildDaynames() {\n    const dates = [];\n\n    const findDay = item => item.type === 'weekday';\n\n    for (let dayIndex = 0; dayIndex < 7; dayIndex++) {\n      dates.push(new Date(2017, 0, dayIndex + 1));\n    }\n\n    const weekdays = ['long', 'short'];\n    const list = [];\n    const lookup = {};\n\n    for (const weekday of weekdays) {\n      const format = Intl.DateTimeFormat(this.locale, {\n        weekday\n      });\n\n      for (let dayIndex = 0; dayIndex < 7; dayIndex++) {\n        const parts = format.formatToParts(dates[dayIndex]);\n        let text = parts.find(findDay).value.toLowerCase();\n\n        if (weekday === 'short') {\n          text = text.replace(/\\.$/, '');\n          list.push(`${text}\\\\.?`);\n        } else {\n          list.push(text);\n        }\n\n        lookup[text] = dayIndex;\n      }\n    }\n\n    this.vars.DAYNAME = list.join('|');\n    this.lookups.dayname = lookup;\n  }\n  /**\n   * Build lookup for meridiems (e.g. AM/PM)\n   */\n\n\n  buildMeridiems() {\n    const dates = [new Date(2017, 0, 1), new Date(2017, 0, 1, 23, 0, 0)];\n\n    const findDayPeriod = item => item.type === 'dayPeriod';\n\n    const list = [];\n    const lookup = {};\n    const format = Intl.DateTimeFormat(this.locale, {\n      timeStyle: 'long'\n    });\n\n    for (let i = 0; i < 2; i++) {\n      const parts = format.formatToParts(dates[i]);\n      const dayPeriod = parts.find(findDayPeriod);\n\n      if (!dayPeriod) {\n        // this locale does not use AM/PM\n        return;\n      }\n\n      const text = dayPeriod.value.toLowerCase();\n      list.push(text);\n      lookup[text] = i * 12;\n    }\n\n    this.vars.MERIDIEM = list.join('|');\n    this.lookups.meridiem = lookup;\n  }\n  /**\n   * Given a list of unit names and matches, build result object\n   * @param {Array} units  Unit names such as \"year\", \"month\" and \"millisecond\"\n   * @param {Array} matches  The values matched by a Format's RegExp\n   * @returns {Object}\n   */\n\n\n  getObject(units, matches) {\n    const object = {};\n    units.forEach((unit, i) => {\n      if (!unit) {\n        return;\n      }\n\n      let match = matches[i + 1];\n      match = match.toLowerCase();\n      match = match.replace(/\\.$/, '');\n\n      if (unit === 'offset') {\n        object.offset = this.offsetToMinutes(match);\n      } else if (this.lookups[unit]) {\n        object[unit] = this.lookups[unit][match] || this.toInt(match);\n      } else {\n        object[unit] = this.toInt(match);\n      }\n    });\n    return object;\n  }\n  /**\n   * Take a response object and cast each unit to Number\n   * @param {Object} object  An object with one or more units\n   * @returns {Object}  An object with same units but Numeric\n   */\n\n\n  castObject(object) {\n    const casted = {};\n    units.forEach(unit => {\n      if (unit in object) {\n        casted[unit] = this.toInt(object[unit]);\n      }\n    });\n\n    if (typeof object.offset === 'string') {\n      casted.offset = this.offsetToMinutes(object.offset);\n    } else if (typeof object.offset === 'number') {\n      casted.offset = object.offset;\n    }\n\n    return casted;\n  }\n  /**\n   * Convert an offset string to Numeric minutes (e.g. \"-0500\", \"+5\", \"+03:30\")\n   * @param {String} offsetString\n   * @returns {Number}\n   */\n\n\n  offsetToMinutes(offsetString) {\n    const captured = offsetString.match(/^([+-])(..?):?(..)?$/);\n\n    if (captured) {\n      const [, sign, hours, minutes] = captured;\n      return (sign === '-' ? -1 : 1) * (this.toInt(hours) * 60 + this.toInt(minutes || 0));\n    }\n\n    return 0;\n  }\n  /**\n   * Compile template into a RegExp and return it\n   * @param {String} template  The template string\n   * @returns {RegExp}\n   */\n\n\n  compile(template) {\n    const regexString = template.replace(/_([A-Z0-9]+)_/g, ($0, $1) => {\n      if (!this.vars[$1]) {\n        throw new Error(`Template string contains invalid variable _${$1}_`);\n      }\n\n      return this.vars[$1];\n    });\n    return new RegExp(regexString, 'i');\n  }\n\n}\n\nmodule.exports = LocaleHelper;","map":{"version":3,"sources":["/home/mike/proj/frontend/ui/node_modules/any-date-parser/src/LocaleHelper/LocaleHelper.js"],"names":["baseLookups","require","latn","other","buildDigits","defaultLocale","units","cache","LocaleHelper","factory","locale","toLowerCase","constructor","lookups","vars","fmt","Intl","NumberFormat","numberingSystem","resolvedOptions","build","toInt","digitString","parseInt","i","length","String","digit","buildNumbers","test","buildMonthNames","buildDaynames","buildMeridiems","nsName","group","lookup","name","hasOwnProperty","replace","months","split","forEach","month","idx","suffix","maybePeriod","dates","findMonth","item","type","monthIdx","push","Date","dateStyles","dateStyle","format","DateTimeFormat","parts","formatToParts","text","find","value","MONTHNAME","Object","keys","join","findDay","dayIndex","weekdays","list","weekday","DAYNAME","dayname","findDayPeriod","timeStyle","dayPeriod","MERIDIEM","meridiem","getObject","matches","object","unit","match","offset","offsetToMinutes","castObject","casted","offsetString","captured","sign","hours","minutes","compile","template","regexString","$0","$1","Error","RegExp","module","exports"],"mappings":"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","sourcesContent":["const baseLookups = require('../data/baseLookups.js');\nconst { latn, other } = require('../data/templates.js');\nconst { buildDigits } = require('../data/numberingSystems.js');\nconst defaultLocale = require('../data/defaultLocale.js');\nconst units = require('../data/units.js');\n\n// keep track of singletons by locale name\nconst cache = {};\n\nclass LocaleHelper {\n\t/**\n\t * Get a singleton instance with the given locale\n\t * @param {String} locale such as en, en-US, es, fr-FR, etc.\n\t * @returns {LocaleHelper}\n\t */\n\tstatic factory(locale = defaultLocale) {\n\t\tif (!cache[locale.toLowerCase()]) {\n\t\t\tcache[locale.toLowerCase()] = new LocaleHelper(locale);\n\t\t}\n\t\treturn cache[locale.toLowerCase()];\n\t}\n\n\t/**\n\t * Create a new instance with the given locale\n\t * @param {String} locale such as en, en-US, es, fr-FR, etc.\n\t */\n\tconstructor(locale = defaultLocale) {\n\t\t/**\n\t\t * The locale string\n\t\t * @type {String}\n\t\t */\n\t\tthis.locale = locale;\n\t\t/**\n\t\t * Lookups for zone, year, meridiem, month, dayname, digit\n\t\t * @type {Object} lookups\n\t\t */\n\t\tthis.lookups = { ...baseLookups };\n\t\t/**\n\t\t * Template variables including MONTHNAME, MONTH, ZONE, etc.\n\t\t * @type {Object} vars\n\t\t */\n\t\tthis.vars = { ...latn };\n\t\tconst fmt = new Intl.NumberFormat(this.locale);\n\t\t/**\n\t\t * The numbering system to use (latn=standard arabic digits)\n\t\t * @type {String} numberingSystem\n\t\t */\n\t\tthis.numberingSystem = fmt.resolvedOptions().numberingSystem;\n\t\tthis.build();\n\t\t// console.log({\n\t\t// \tnumberingSystem: this.numberingSystem,\n\t\t// \tmonth: this.lookups.month,\n\t\t// \tdayname: this.lookups.dayname,\n\t\t// \tMONTHNAME: this.vars.MONTHNAME,\n\t\t// \tDAYNAME: this.vars.DAYNAME,\n\t\t// });\n\t}\n\n\t/**\n\t * Cast a string to an integer, minding numbering system\n\t * @param {String|Number} digitString  Such as \"2020\" or \"二〇二〇\"\n\t * @returns {Number}\n\t */\n\ttoInt(digitString) {\n\t\tif (typeof digitString === 'number') {\n\t\t\treturn digitString;\n\t\t}\n\t\tif (this.numberingSystem === 'latn') {\n\t\t\treturn parseInt(digitString, 10);\n\t\t}\n\t\tlet latn = '';\n\t\tfor (let i = 0; i < digitString.length; i++) {\n\t\t\tlatn += String(this.lookups.digit[digitString[i]]);\n\t\t}\n\t\treturn parseInt(latn, 10);\n\t}\n\n\t/**\n\t * Build lookups for digits, month names, day names, and meridiems based on the locale\n\t */\n\tbuild() {\n\t\tif (this.numberingSystem !== 'latn') {\n\t\t\tthis.buildNumbers();\n\t\t}\n\t\tif (!/^en/i.test(this.locale)) {\n\t\t\tthis.buildMonthNames();\n\t\t\tthis.buildDaynames();\n\t\t\tthis.buildMeridiems();\n\t\t}\n\t}\n\n\t/**\n\t * Build lookups for digits\n\t */\n\tbuildNumbers() {\n\t\tconst nsName = this.numberingSystem;\n\t\tconst { group, lookup } = buildDigits(nsName);\n\t\tthis.lookups.digit = lookup;\n\t\tfor (const name in other) {\n\t\t\t/* istanbul ignore next */\n\t\t\tif (!other.hasOwnProperty(name)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis.vars[name] = other[name].replace(/\\*/g, group);\n\t\t}\n\t}\n\n\t/**\n\t * Build lookup for month names\n\t */\n\tbuildMonthNames() {\n\t\tconst vars = {};\n\t\tconst lookup = {};\n\t\tif (/^fi/i.test(this.locale)) {\n\t\t\tconst months =\n\t\t\t\t'tammi|helmi|maalis|huhti|touko|kesä|heinä|elo|syys|loka|marras|joulu';\n\t\t\tmonths.split('|').forEach((month, idx) => {\n\t\t\t\t['', 'k', 'kuu', 'kuuta'].forEach((suffix, i) => {\n\t\t\t\t\tconst maybePeriod = i < 2 ? '\\\\.?' : '';\n\t\t\t\t\tvars[month + suffix + maybePeriod] = true;\n\t\t\t\t\tlookup[month + suffix] = idx + 1;\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\tconst dates = [];\n\t\t\tconst findMonth = item => item.type === 'month';\n\t\t\tfor (let monthIdx = 0; monthIdx < 12; monthIdx++) {\n\t\t\t\tdates.push(new Date(2017, monthIdx, 1));\n\t\t\t}\n\t\t\tconst dateStyles = ['full', 'long', 'medium'];\n\t\t\tfor (const dateStyle of dateStyles) {\n\t\t\t\tconst format = Intl.DateTimeFormat(this.locale, { dateStyle });\n\t\t\t\tfor (let monthIdx = 0; monthIdx < 12; monthIdx++) {\n\t\t\t\t\tconst parts = format.formatToParts(dates[monthIdx]);\n\t\t\t\t\tlet text = parts.find(findMonth).value.toLowerCase();\n\t\t\t\t\tif (/^ko/i.test(this.locale)) {\n\t\t\t\t\t\t// Korean word for month is sometimes used\n\t\t\t\t\t\ttext += '월';\n\t\t\t\t\t}\n\t\t\t\t\tif (dateStyle === 'medium') {\n\t\t\t\t\t\t// some languages (including arabic and chinese) don't have a 'medium' size\n\t\t\t\t\t\tif (/^ar|zh/i.test(this.locale)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttext = text.replace(/\\.$/, '');\n\t\t\t\t\t\tvars[`${text}\\\\.?`] = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvars[text] = true;\n\t\t\t\t\t}\n\t\t\t\t\tlookup[text] = monthIdx + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst format = Intl.DateTimeFormat(this.locale, { month: 'short' });\n\t\t\tfor (let monthIdx = 0; monthIdx < 12; monthIdx++) {\n\t\t\t\tconst parts = format.formatToParts(dates[monthIdx]);\n\t\t\t\tlet text = parts.find(findMonth).value.toLowerCase();\n\t\t\t\ttext = text.replace(/\\.$/, '');\n\t\t\t\tvars[`${text}\\\\.?`] = true;\n\t\t\t\tlookup[text] = monthIdx + 1;\n\t\t\t}\n\t\t}\n\t\tthis.vars.MONTHNAME = Object.keys(vars).join('|');\n\t\tthis.lookups.month = lookup;\n\t}\n\n\t/**\n\t * Build lookup for day name\n\t */\n\tbuildDaynames() {\n\t\tconst dates = [];\n\t\tconst findDay = item => item.type === 'weekday';\n\t\tfor (let dayIndex = 0; dayIndex < 7; dayIndex++) {\n\t\t\tdates.push(new Date(2017, 0, dayIndex + 1));\n\t\t}\n\t\tconst weekdays = ['long', 'short'];\n\t\tconst list = [];\n\t\tconst lookup = {};\n\t\tfor (const weekday of weekdays) {\n\t\t\tconst format = Intl.DateTimeFormat(this.locale, { weekday });\n\t\t\tfor (let dayIndex = 0; dayIndex < 7; dayIndex++) {\n\t\t\t\tconst parts = format.formatToParts(dates[dayIndex]);\n\t\t\t\tlet text = parts.find(findDay).value.toLowerCase();\n\t\t\t\tif (weekday === 'short') {\n\t\t\t\t\ttext = text.replace(/\\.$/, '');\n\t\t\t\t\tlist.push(`${text}\\\\.?`);\n\t\t\t\t} else {\n\t\t\t\t\tlist.push(text);\n\t\t\t\t}\n\t\t\t\tlookup[text] = dayIndex;\n\t\t\t}\n\t\t}\n\t\tthis.vars.DAYNAME = list.join('|');\n\t\tthis.lookups.dayname = lookup;\n\t}\n\n\t/**\n\t * Build lookup for meridiems (e.g. AM/PM)\n\t */\n\tbuildMeridiems() {\n\t\tconst dates = [new Date(2017, 0, 1), new Date(2017, 0, 1, 23, 0, 0)];\n\t\tconst findDayPeriod = item => item.type === 'dayPeriod';\n\t\tconst list = [];\n\t\tconst lookup = {};\n\t\tconst format = Intl.DateTimeFormat(this.locale, { timeStyle: 'long' });\n\t\tfor (let i = 0; i < 2; i++) {\n\t\t\tconst parts = format.formatToParts(dates[i]);\n\t\t\tconst dayPeriod = parts.find(findDayPeriod);\n\t\t\tif (!dayPeriod) {\n\t\t\t\t// this locale does not use AM/PM\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst text = dayPeriod.value.toLowerCase();\n\t\t\tlist.push(text);\n\t\t\tlookup[text] = i * 12;\n\t\t}\n\t\tthis.vars.MERIDIEM = list.join('|');\n\t\tthis.lookups.meridiem = lookup;\n\t}\n\n\t/**\n\t * Given a list of unit names and matches, build result object\n\t * @param {Array} units  Unit names such as \"year\", \"month\" and \"millisecond\"\n\t * @param {Array} matches  The values matched by a Format's RegExp\n\t * @returns {Object}\n\t */\n\tgetObject(units, matches) {\n\t\tconst object = {};\n\t\tunits.forEach((unit, i) => {\n\t\t\tif (!unit) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet match = matches[i + 1];\n\t\t\tmatch = match.toLowerCase();\n\t\t\tmatch = match.replace(/\\.$/, '');\n\t\t\tif (unit === 'offset') {\n\t\t\t\tobject.offset = this.offsetToMinutes(match);\n\t\t\t} else if (this.lookups[unit]) {\n\t\t\t\tobject[unit] = this.lookups[unit][match] || this.toInt(match);\n\t\t\t} else {\n\t\t\t\tobject[unit] = this.toInt(match);\n\t\t\t}\n\t\t});\n\t\treturn object;\n\t}\n\n\t/**\n\t * Take a response object and cast each unit to Number\n\t * @param {Object} object  An object with one or more units\n\t * @returns {Object}  An object with same units but Numeric\n\t */\n\tcastObject(object) {\n\t\tconst casted = {};\n\t\tunits.forEach(unit => {\n\t\t\tif (unit in object) {\n\t\t\t\tcasted[unit] = this.toInt(object[unit]);\n\t\t\t}\n\t\t});\n\t\tif (typeof object.offset === 'string') {\n\t\t\tcasted.offset = this.offsetToMinutes(object.offset);\n\t\t} else if (typeof object.offset === 'number') {\n\t\t\tcasted.offset = object.offset;\n\t\t}\n\t\treturn casted;\n\t}\n\n\t/**\n\t * Convert an offset string to Numeric minutes (e.g. \"-0500\", \"+5\", \"+03:30\")\n\t * @param {String} offsetString\n\t * @returns {Number}\n\t */\n\toffsetToMinutes(offsetString) {\n\t\tconst captured = offsetString.match(/^([+-])(..?):?(..)?$/);\n\t\tif (captured) {\n\t\t\tconst [, sign, hours, minutes] = captured;\n\t\t\treturn (\n\t\t\t\t(sign === '-' ? -1 : 1) *\n\t\t\t\t(this.toInt(hours) * 60 + this.toInt(minutes || 0))\n\t\t\t);\n\t\t}\n\t\treturn 0;\n\t}\n\n\t/**\n\t * Compile template into a RegExp and return it\n\t * @param {String} template  The template string\n\t * @returns {RegExp}\n\t */\n\tcompile(template) {\n\t\tconst regexString = template.replace(/_([A-Z0-9]+)_/g, ($0, $1) => {\n\t\t\tif (!this.vars[$1]) {\n\t\t\t\tthrow new Error(`Template string contains invalid variable _${$1}_`);\n\t\t\t}\n\t\t\treturn this.vars[$1];\n\t\t});\n\t\treturn new RegExp(regexString, 'i');\n\t}\n}\n\nmodule.exports = LocaleHelper;\n"]},"metadata":{},"sourceType":"script"}