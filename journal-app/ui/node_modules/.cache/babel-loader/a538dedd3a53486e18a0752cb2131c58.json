{"ast":null,"code":"import { useMemo, useRef, useCallback, useEffect } from 'react';\nimport lodashDebounce from 'lodash.debounce';\n\nvar createCallback = function createCallback(debounce, handleOnScroll, options) {\n  if (debounce) {\n    return lodashDebounce(handleOnScroll, debounce, options);\n  } else {\n    return handleOnScroll;\n  }\n};\n\nfunction useBottomScrollListener(onBottom, options) {\n  var _useMemo = useMemo(function () {\n    var _options$offset, _options$debounce, _options$debounceOpti, _options$triggerOnNoS;\n\n    return {\n      offset: (_options$offset = options === null || options === void 0 ? void 0 : options.offset) != null ? _options$offset : 0,\n      debounce: (_options$debounce = options === null || options === void 0 ? void 0 : options.debounce) != null ? _options$debounce : 200,\n      debounceOptions: (_options$debounceOpti = options === null || options === void 0 ? void 0 : options.debounceOptions) != null ? _options$debounceOpti : {\n        leading: true\n      },\n      triggerOnNoScroll: (_options$triggerOnNoS = options === null || options === void 0 ? void 0 : options.triggerOnNoScroll) != null ? _options$triggerOnNoS : false\n    };\n  }, [options === null || options === void 0 ? void 0 : options.offset, options === null || options === void 0 ? void 0 : options.debounce, options === null || options === void 0 ? void 0 : options.debounceOptions, options === null || options === void 0 ? void 0 : options.triggerOnNoScroll]),\n      offset = _useMemo.offset,\n      triggerOnNoScroll = _useMemo.triggerOnNoScroll,\n      debounce = _useMemo.debounce,\n      debounceOptions = _useMemo.debounceOptions;\n\n  var debouncedOnBottom = useMemo(function () {\n    return createCallback(debounce, onBottom, debounceOptions);\n  }, [debounce, onBottom]);\n  var containerRef = useRef(null);\n  var handleOnScroll = useCallback(function () {\n    if (containerRef.current != null) {\n      var scrollNode = containerRef.current;\n      var scrollContainerBottomPosition = Math.round(scrollNode.scrollTop + scrollNode.clientHeight);\n      var scrollPosition = Math.round(scrollNode.scrollHeight - offset);\n\n      if (scrollPosition <= scrollContainerBottomPosition) {\n        debouncedOnBottom();\n      }\n    } else {\n      var _scrollNode = document.scrollingElement || document.documentElement;\n\n      var _scrollContainerBottomPosition = Math.round(_scrollNode.scrollTop + window.innerHeight);\n\n      var _scrollPosition = Math.round(_scrollNode.scrollHeight - offset);\n\n      if (_scrollPosition <= _scrollContainerBottomPosition) {\n        debouncedOnBottom();\n      }\n    }\n  }, [offset, onBottom, containerRef.current]);\n  useEffect(function () {\n    var ref = containerRef.current;\n\n    if (ref != null) {\n      ref.addEventListener('scroll', handleOnScroll);\n    } else {\n      window.addEventListener('scroll', handleOnScroll);\n    }\n\n    if (triggerOnNoScroll) {\n      handleOnScroll();\n    }\n\n    return function () {\n      if (ref != null) {\n        ref.removeEventListener('scroll', handleOnScroll);\n      } else {\n        window.removeEventListener('scroll', handleOnScroll);\n      }\n    };\n  }, [handleOnScroll, debounce]);\n  return containerRef;\n}\n\nvar BottomScrollListener = function BottomScrollListener(_ref) {\n  var children = _ref.children,\n      onBottom = _ref.onBottom,\n      offset = _ref.offset,\n      debounce = _ref.debounce,\n      debounceOptions = _ref.debounceOptions,\n      triggerOnNoScroll = _ref.triggerOnNoScroll;\n  var optionalScrollContainerRef = useBottomScrollListener(onBottom, {\n    offset: offset,\n    debounce: debounce,\n    debounceOptions: debounceOptions,\n    triggerOnNoScroll: triggerOnNoScroll\n  });\n  if (!children) return null;else if (typeof children === 'function') return children(optionalScrollContainerRef);else return children;\n};\n\nexport { BottomScrollListener, useBottomScrollListener };","map":null,"metadata":{},"sourceType":"module"}