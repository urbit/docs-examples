{"ast":null,"code":"var _jsxFileName = \"/home/mike/proj/frontend/ui/src/App.js\";\nimport React, { Component } from 'react';\nimport Urbit from '@urbit/http-api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.urbit = new Urbit(\"http://localhost:8080\", \"lidlut-tabwed-pillex-ridrup\");\n    this.state = {\n      entries: []\n    };\n\n    this.getEntries = async () => {\n      const {\n        entries: e\n      } = this.state;\n      const before = e.length === 0 ? Date.now() : e[e.length - 1].id;\n      const max = 6;\n      const path = `/entries/before/${before}/${max}`;\n      const result = await this.urbit.scry({\n        app: \"journal\",\n        path: path\n      });\n      this.handleUpdate(result);\n    };\n\n    this.subscribe = () => {\n      this.urbit.subscribe({\n        app: \"journal\",\n        path: \"/updates\",\n        event: this.handleUpdate\n      });\n    };\n\n    this.spot = id => {\n      const {\n        entries: e\n      } = this.state;\n      let low = 0;\n      let high = e.length;\n\n      while (low < high) {\n        let mid = low + high >>> 1;\n        if (e[mid].id > id) low = mid + 1;else high = mid;\n      }\n\n      return low;\n    };\n\n    this.handleUpdate = upd => {\n      const items = this.state.entries;\n\n      if (\"entries\" in upd) {\n        this.setState({\n          entries: items.concat(upd.entries)\n        });\n      } else if (\"add\" in upd) {\n        const ind = this.spot(upd.add.id);\n        if (upd.add.id > items[items.length - 1].id) items.splice(ind, 0, upd.add);\n        this.setState({\n          entries: items\n        });\n      } else if (\"edit\" in upd) {\n        const ind = items.findIndex(e => e.id === upd.edit.id);\n        if (ind !== -1) items[ind] = upd.edit;\n        this.setState({\n          entries: items\n        });\n      } else if (\"del\" in upd) {\n        const ind = items.findIndex(e => e.id === upd.del.id);\n        if (ind !== -1) items.splice(ind, 1);\n        this.setState({\n          entries: items\n        });\n      }\n\n      ;\n    };\n\n    this.printEntries = () => {\n      const {\n        entries\n      } = this.state.entries;\n      const reg = /(?:\\r?\\n[ \\t]*){2,}(?!\\s*$)/;\n      const items = entries.map(_ref => {\n        let {\n          id,\n          txt\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: txt.split(reg).map(e => /*#__PURE__*/_jsxDEV(\"p\", {\n            children: e\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 34\n          }, this))\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 7\n        }, this);\n      });\n      return /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: items\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 12\n      }, this);\n    };\n\n    this.urbit.ship = \"zod\";\n  }\n\n  componentDidMount() {\n    this.getEntries();\n    this.subscribe();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.getEntries(),\n        children: \"Moar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), this.printEntries()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/mike/proj/frontend/ui/src/App.js"],"names":["React","Component","Urbit","App","constructor","urbit","state","entries","getEntries","e","before","length","Date","now","id","max","path","result","scry","app","handleUpdate","subscribe","event","spot","low","high","mid","upd","items","setState","concat","ind","add","splice","findIndex","edit","del","printEntries","reg","map","txt","split","ship","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Urbit from '@urbit/http-api';\n\n\nclass App extends Component {\n  urbit = new Urbit(\"http://localhost:8080\", \"lidlut-tabwed-pillex-ridrup\");\n  state = {\n    entries: [],\n  };\n\n  constructor() {\n    super();\n    this.urbit.ship = \"zod\"\n  }\n\n  componentDidMount() {\n    this.getEntries();\n    this.subscribe();\n  }\n\n  getEntries = async () => {\n    const {entries: e} = this.state;\n    const before = (e.length === 0) ? Date.now() : e[e.length - 1].id;\n    const max = 6;\n    const path = `/entries/before/${before}/${max}`;\n    const result = await this.urbit.scry({\n      app: \"journal\",\n      path: path\n    });\n    this.handleUpdate(result);\n  };\n\n  subscribe = () => {\n    this.urbit.subscribe({\n      app: \"journal\",\n      path: \"/updates\",\n      event: this.handleUpdate,\n    })\n  };\n\n  spot = (id) => {\n    const {entries: e} = this.state;\n    let low = 0\n    let high = e.length;\n    while (low < high) {\n      let mid = (low + high) >>> 1;\n      if (e[mid].id > id) low = mid + 1;\n      else high = mid;\n    }\n    return low;\n  }\n\n  handleUpdate = (upd) => {\n    const items = this.state.entries;\n    if (\"entries\" in upd) {\n      this.setState({entries: items.concat(upd.entries)})\n    } else if (\"add\" in upd) {\n      const ind = this.spot(upd.add.id);\n      if (upd.add.id > items[items.length - 1].id) items.splice(ind, 0, upd.add);\n      this.setState({entries: items});\n    } else if (\"edit\" in upd) {\n      const ind = items.findIndex(e => e.id === upd.edit.id);\n      if (ind !== -1) items[ind] = upd.edit;\n      this.setState({entries: items});\n    } else if (\"del\" in upd) {\n      const ind = items.findIndex(e => e.id === upd.del.id);\n      if (ind !== -1) items.splice(ind, 1);\n      this.setState({entries: items});\n    };\n  };\n\n  printEntries = () => {\n    const {entries} = this.state.entries;\n    const reg = /(?:\\r?\\n[ \\t]*){2,}(?!\\s*$)/;\n    const items = entries.map(({id, txt}) =>\n      <li key={id}>\n        {txt.split(reg).map(e => <p>{e}</p>)}\n      </li>\n    );\n    return <ul>{items}</ul>;\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <button onClick={()=>this.getEntries()}>Moar</button>\n        {this.printEntries()}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}