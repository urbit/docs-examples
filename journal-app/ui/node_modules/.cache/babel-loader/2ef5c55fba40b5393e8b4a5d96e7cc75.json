{"ast":null,"code":"var _jsxFileName = \"/home/mike/proj/frontend/ui/src/App.js\";\nimport React, { Component } from 'react';\nimport Urbit from '@urbit/http-api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.urbit = new Urbit(\"http://localhost:8080\", \"lidlut-tabwed-pillex-ridrup\");\n    this.state = {\n      entries: [],\n      newest: null,\n      oldest: null\n    };\n    this.urbit.ship = \"zod\";\n  }\n\n  componentDidMount() {\n    this.getEntries();\n  }\n\n  async getEntries() {\n    const before = this.state.oldest == null ? Date.now() : this.state.oldest;\n    const max = 1;\n    const path = `/entries/before/${before}/${max}`;\n    const result = await this.urbit.scry({\n      app: \"journal\",\n      path: path\n    });\n\n    if (\"entries\" in result) {\n      const entries = result.entries;\n      const newest = entries.length > 0 ? entries[0].id : this.state.newest;\n      const oldest = entries.length > 0 ? entries[entries.length - 1].id : this.state.oldest;\n      this.setState({\n        entries: this.state.entries.concat(entries),\n        newest: newest,\n        oldest: oldest\n      });\n    }\n\n    ;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Moar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(this.state, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/mike/proj/frontend/ui/src/App.js"],"names":["React","Component","Urbit","App","constructor","urbit","state","entries","newest","oldest","ship","componentDidMount","getEntries","before","Date","now","max","path","result","scry","app","length","id","setState","concat","render","JSON","stringify"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,KAAP,MAAkB,iBAAlB;;;AAEA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AAQ1BG,EAAAA,WAAW,GAAG;AACZ;AADY,SAPdC,KAOc,GAPN,IAAIH,KAAJ,CAAU,uBAAV,EAAmC,6BAAnC,CAOM;AAAA,SANdI,KAMc,GANN;AACNC,MAAAA,OAAO,EAAE,EADH;AAENC,MAAAA,MAAM,EAAE,IAFF;AAGNC,MAAAA,MAAM,EAAE;AAHF,KAMM;AAEZ,SAAKJ,KAAL,CAAWK,IAAX,GAAkB,KAAlB;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,UAAL;AACD;;AAEe,QAAVA,UAAU,GAAG;AACjB,UAAMC,MAAM,GAAI,KAAKP,KAAL,CAAWG,MAAX,IAAqB,IAAtB,GACPK,IAAI,CAACC,GAAL,EADO,GACM,KAAKT,KAAL,CAAWG,MADhC;AAEA,UAAMO,GAAG,GAAG,CAAZ;AACA,UAAMC,IAAI,GAAI,mBAAkBJ,MAAO,IAAGG,GAAI,EAA9C;AACA,UAAME,MAAM,GAAG,MAAM,KAAKb,KAAL,CAAWc,IAAX,CAAgB;AACnCC,MAAAA,GAAG,EAAE,SAD8B;AAEnCH,MAAAA,IAAI,EAAEA;AAF6B,KAAhB,CAArB;;AAIA,QAAI,aAAaC,MAAjB,EAAyB;AACvB,YAAMX,OAAO,GAAGW,MAAM,CAACX,OAAvB;AACA,YAAMC,MAAM,GAAID,OAAO,CAACc,MAAR,GAAiB,CAAlB,GACPd,OAAO,CAAC,CAAD,CAAP,CAAWe,EADJ,GACS,KAAKhB,KAAL,CAAWE,MADnC;AAEA,YAAMC,MAAM,GAAIF,OAAO,CAACc,MAAR,GAAiB,CAAlB,GACPd,OAAO,CAACA,OAAO,CAACc,MAAR,GAAiB,CAAlB,CAAP,CAA4BC,EADrB,GAEP,KAAKhB,KAAL,CAAWG,MAFnB;AAGA,WAAKc,QAAL,CAAc;AACZhB,QAAAA,OAAO,EAAE,KAAKD,KAAL,CAAWC,OAAX,CAAmBiB,MAAnB,CAA0BjB,OAA1B,CADG;AAEZC,QAAAA,MAAM,EAAEA,MAFI;AAGZC,QAAAA,MAAM,EAAEA;AAHI,OAAd;AAKD;;AAAA;AACF;;AAGDgB,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,KAAD,CAAO,QAAP;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAMC,IAAI,CAACC,SAAL,CAAe,KAAKrB,KAApB,EAA2B,IAA3B,EAAiC,CAAjC;AAAN;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AAjDyB;;AAoD5B,eAAeH,GAAf","sourcesContent":["import React, {Component} from 'react';\nimport Urbit from '@urbit/http-api';\n\nclass App extends Component {\n  urbit = new Urbit(\"http://localhost:8080\", \"lidlut-tabwed-pillex-ridrup\");\n  state = {\n    entries: [],\n    newest: null,\n    oldest: null\n  };\n\n  constructor() {\n    super();\n    this.urbit.ship = \"zod\";\n  };\n\n  componentDidMount() {\n    this.getEntries();\n  };\n\n  async getEntries() {\n    const before = (this.state.oldest == null)\n          ? Date.now() : this.state.oldest;\n    const max = 1;\n    const path = `/entries/before/${before}/${max}`;\n    const result = await this.urbit.scry({\n      app: \"journal\",\n      path: path\n    });\n    if (\"entries\" in result) {\n      const entries = result.entries;\n      const newest = (entries.length > 0)\n            ? entries[0].id : this.state.newest;\n      const oldest = (entries.length > 0)\n            ? entries[entries.length - 1].id\n            : this.state.oldest;\n      this.setState({\n        entries: this.state.entries.concat(entries),\n        newest: newest,\n        oldest: oldest\n      });\n    };\n  };\n\n\n  render() {\n    return (\n      <React.Fragment>\n        <button>Moar</button>\n        <pre>{JSON.stringify(this.state, null, 2)}</pre>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}